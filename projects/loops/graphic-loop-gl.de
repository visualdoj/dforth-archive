// 2012.02.27 # Doj
// Цикл оконного приложения

include" units\statements\switch.de"

include" units\headers\windows.de"
include" units\headers\gl.de"

pchar" DEMBRO_RENDERER_WND" constant DEMBRO_RENDERER_WND
WS_VISIBLE constant DEMBRO_STYLE

variable *not-loaded
*not-loaded on
variable *exit?
variable *width
variable *height
variable *renderer
variable *header
// windows
variable *handle
variable *dc
variable *rc
variable *pixel-format
variable *lastrender

: WIDTH *width @ ;
: HEIGHT *height @ ;

: as-uint32, uint->uint32 uint32, ;
: as-uint16, uint->uint16 uint16, ;
: as-uint8, uint->uint8 uint8, ;
// : as-uint32, , ;
// : as-uint16, , ;
// : as-uint8,  , ;

// Структура PIXELFORMATDESCRIPTOR
0 value dwFlags
0 value lpszClassName
create PIXELFORMATDESCRIPTOR
    here // см. в конце подсчёт размера
    0 as-uint16, // nSize
    2 as-uint16, // nVersion
      PFD_DRAW_TO_WINDOW 
      PFD_SUPPORT_OPENGL or 
      PFD_DOUBLEBUFFER or as-uint32, // dwFlags uint32
    PFD_TYPE_RGBA as-uint8, // iPixelType
    32 as-uint8, // cColorBits
    0  as-uint8, // cRedBits 
    0  as-uint8, // cRedShift 
    0  as-uint8, // cGreenBits 
    0  as-uint8, // cGreenShift 
    0  as-uint8, // cBlueBits 
    0  as-uint8, // cBlueShift 
    0  as-uint8, // cAlphaBits 
    0  as-uint8, // cAlphaShift 
    0  as-uint8, // cAccumBits 
    0  as-uint8, // cAccumRedBits 
    0  as-uint8, // cAccumGreenBits 
    0  as-uint8, // cAccumBlueBits 
    0  as-uint8, // cAccumAlphaBits 
    24 as-uint8, // cDepthBits
    8  as-uint8, // cStencilBits
    0  as-uint8, // cAuxBuffers 
    PFD_MAIN_PLANE as-uint8, // iLayerType
    0  as-uint8, // bReserved 
    0  , // dwLayerMask
    0  , // dwVisibleMask
    0  , // dwDamageMask
    here swap - uint->uint16 PIXELFORMATDESCRIPTOR uint16! // заполняем cbSize

// Функция, инициализирующая OpenGL
: grInit
       *handle @ GetDC dup *dc !
       ." GetDC: " . cr
       *dc @ PIXELFORMATDESCRIPTOR ChoosePixelFormat dup *pixel-format !
       ." ChoosePixelFormat: " . cr
       *dc @ *pixel-format @ PIXELFORMATDESCRIPTOR SetPixelFormat
       ." SetPixelFormat: " . GetLastError uint. cr
       *dc @ wglCreateContext dup *rc !
       ." wglCreateContext: " . cr
       *dc @ *rc @ wglMakeCurrent
       ." wglMakeCurrent: " . cr
       // *handle @ SW_SHOW ShowWindow
       GL_SMOOTH glShadeModel 
       ." glShadeModel done"cr
;

: grClear
       0 int->float dup dup dup glClearColor
       GL_COLOR_BUFFER_BIT glClear ;

// 2d режим
: gr2D 
       0 0 WIDTH HEIGHT      glViewport
       GL_PROJECTION         glMatrixMode
                             glLoadIdentity
       0      int->double 
       WIDTH  int->double
       HEIGHT int->double 
       0      int->double
       -1     int->double
       1      int->double    glOrtho
       GL_MODELVIEW          glMatrixMode
                             glLoadIdentity
;

: OnKeyDown ( i --) 27 = if *exit? on then ;

// Функция WindowsProc, в неё будут передаваться сообщения, приходящие
// окну из системы.
:noname  ( hWnd:uint Msg:uint wParam:int lParam:int -- )
     // drop drop drop drop
     3 pick switch 
         WM_DESTROY       of drop drop drop drop *exit? on \of
     //   WM_KEYDOWN       of drop OnKeyDown drop drop \of
       // WM_KEYUP         of drop OnKeyUp drop drop \of
       // WM_CHAR          of drop OnChar drop drop \of
       // WM_LBUTTONDOWN   of drop drop drop drop OnLButtonDown \of
       // WM_LBUTTONDBLCLK of drop drop drop drop OnLButtonDoubleClick \of
       // WM_RBUTTONDOWN   of drop drop drop drop OnRButtonDown \of
       // WM_MBUTTONDOWN   of drop drop drop drop OnMButtonDown \of
       // WM_MOVING        of OnMoving drop drop drop \of
        DefWindowProcA 
     \switch
; :c WindowProc t_WindowProc c;

// Структура WNDCLASSEX
0 value hCursor
0 value hIcon
0 value lpszClassName
create WNDCLASSEX
    here // см. в конце подсчёт размера
    0 , // cbSize
    CS_HREDRAW 
    CS_VREDRAW or 
    CS_OWNDC or , // style
    WindowProc , // WndProc
    0 , // cbClsExtra
    0 , // cbWndExtra
    0 , // hInstance
    here to hIcon 0 ,
    here to hCursor 0 ,
    0 , // hbrBackground
    0 , // lpszMenuName
    here to lpszClassName 0 ,
    0 , // hIconSm
    here swap - WNDCLASSEX ! // заполняем cbSize

// Функция, создающая новый класс окна
// На выходе — флаг успеха
: CreateWindowClass ( -f) 0 IDC_ARROW       LoadCursorA  hCursor !
                          0 pchar" Icon_1"  LoadIconA    hIcon   !
                          DEMBRO_RENDERER_WND      lpszClassName !
                          WNDCLASSEX RegisterClassExA ;

// Функция, создающая окно
// Возвращает HANDLE окна. Если он равен 0, то при создании окна произошла
// ошибка
: CreateWindow ( -i) WS_EX_APPWINDOW
                     DEMBRO_RENDERER_WND pchar" graphic-loop-gl" WS_VISIBLE
                     160 0 *width @ *height @ ( xywh) 0 0 0 0
                     CreateWindowExA ;

// *msg* — сюда будем получать инфу о приходящих сообщениях
create *msg*
    0 , // hWnd
    0 , // message
    0 , // wParam
    0 , // lParam
    0 , // time
    0 , // pt.x
    0 , // pt.y

// Проверяет произошла ли ошибка, сравнивая i с нулём. Если равна, то печатает
// на консоль строку s и код, возвращённый вызовом GetLastError, иначе нет. 
// На консоль кладёт флаг ошибки, выставленный если ошибка имела место.
: check' ( i B: s - f) if bdrop false else ." ! Failed " str. 
                         ."  " GetLastError . cr true then ;
// Слово немедленного исполнения. Выполняет check' и если была ошибка,
// то выходит из текущей команды если возвращённый командой check' флаг выставлен
// в true
: check ( C:) ( B: s R: i) compile check' ['] if execute compile exit 
                                          ['] then execute ; immediate

: start-graphic-loop ( width height renderer-xt)
    *renderer ! *height ! *width !
    ." HERE" cr
    *not-loaded @ if windows-load opengl-load *not-loaded off then
    ." HERE" cr
    CreateWindowClass [str]" creating window class" check
    ." HERE CreateWindowClass done" cr
    CreateWindow dup *handle ! dup [str]" creating window" check
    ." HERE" cr
    grInit
    ." HERE" cr
    begin
      grClear gr2D *renderer @ execute
      *dc @ SwapBuffers drop
      begin
        *msg* 0 0 0 PM_REMOVE PeekMessageA
      while
        *msg* TranslateMessage drop
        *msg* DispatchMessageA drop
      repeat
    *exit? @ until
    *handle @ DestroyWindow 0= if ." Destroying windows failed" cr then
;
