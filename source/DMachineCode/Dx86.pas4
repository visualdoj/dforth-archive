unit Dx86;

interface 
dnl(
changequote(~,|)

define(~all_implement|, ~|)
define(~all_interface|, ~// x86 mnemonics|)
define(~AsmCode|, ~
  define(~all_interface|, all_interface~
    procedure $1$2; overload;|)
  define(~all_implement|, all_implement~
procedure Tx86.$1$2;
begin
  $3
end;
|)
  |
)
// косвенность
define(~K|, ~const $1: array of $2|)
// assert косвенность
define(~AK|, ~if Length($1) <> 1 then begin
    // TODO
    Exit;
  end;|)
define(~ModRM_Mod|, ~(($1) shl 6)|)
define(~ModRM_Reg|, ~(($1) shl 3)|)
define(~ModRM_R_M|, ~($1)|)
define(~SIB_Mul|, ~(($1) shl 6)|)
define(~SIB_Reg2|, ~(($1) shl 3)|)
define(~SIB_Reg1|, ~($1)|)

// xxx
define(~mne0|, ~AsmCode($1, ~|, WriteB($2);)|)

// xxx int
define(~mnei|, ~AsmCode($1, ~(I: LongInt)|, WriteB($2);
  WriteI(I);)|)

// 1 IMMEDIATE OPERAND
// i := immediate
// xxx byte
define(~mneib|, ~AsmCode($1, ~(B: Tx86b)|, WriteB($2);
  WriteB(Byte(B));)|)
// xxx word
define(~mneiw|, ~AsmCode($1, ~(W: Tx86w)|, WriteB($2);
  WriteW(Word(W));)|)
// xxx dword
define(~mneid|, ~AsmCode($1, ~(D: Tx86d)|, WriteB($2);
  WriteI(LongInt(D));)|)

// REGISTER/MEMORY AND IMMEDIATE OPERANDS
// g := register/memory
define(~mnexix|, ~
 define(~mne$1ib|, ~AsmCode($|~1, ~(Reg: Tx86Reg$~|3; B: Tx86b)|, WriteB($~|2);
  $2
  WriteB(Byte(B));)|)
 define(~mne$1iw|, ~AsmCode($|~1, ~(Reg: Tx86Reg$~|3; W: Tx86w)|, WriteB($~|2);
  $2
  WriteW(Word(W));)|)
 define(~mne$1id|, ~AsmCode($|~1, ~(Reg: Tx86Reg$~|3; D: Tx86d)|, WriteB($~|2);
  $2
  WriteI(LongInt(D));)|)|)
mnexix(gb, // TODO)
mnexix(gw, // TODO)
mnexix(gd, // TODO)

// REGISTER/MEMORY AND REGISTER OPERANDS
define(~mnegxrx|, ~
 define(~mneg$1r$1|, ~AsmCode($|~1, ~(Reg: Tx86Reg$~|3; $1: $3)|,  $2|)
 define(~mner$1g$1|, ~AsmCode($|~1, ~($1: $3; Reg: Tx86Reg$~|3)|,  $2|)
  |)
mnegxrx(b, // TODO, Tx86b, Byte)
mnegxrx(w, // TODO, Tx86w, Word)
mnegxrx(d, // TODO, LongIng, LongInt)

// xxx reg
define(~mner|, ~AsmCode($1, ~(Reg: Tx86Reg$3)|, WriteB($2 + Ord(Reg));)|)

// xxx reg int
define(~mneri|, ~AsmCode($1, ~(Reg: Tx86Reg$3; I: LongInt)|, WriteB($2 + Ord(Reg));
  WriteI(I);)|)

// xxx reg reg
define(~mnerr|, ~AsmCode($1, ~(Reg1, Reg2: Tx86Reg$3)|, WriteB($2); 
  WriteB(ModRM_Mod(3) + ModRM_Reg(Ord(Reg1)) + ModRM_R_M(Ord(Reg2)));)|)

// xxx reg [reg]
define(~mnerk|, ~AsmCode($1, ~(Dst: Tx86Reg$3; K(Reg, Tx86Reg$3))|,
  AK(Reg);
  WriteB($2);
  if Reg[0] = EBP then begin
    WriteB(ModRM_Mod(1) + ModRM_Mod(Ord(Reg)) + ModRM_R_M(Ord(EBP)));
    WriteB(0);
  end else if Reg[0] = ESP then begin
    WriteB(ModRM_Mod(0) + ModRM_Reg(Ord(Reg)) + ModRM_R_M(Ord(ESP)));
    WriteB(SIB_Mul(0) + SIB_Reg2(Ord(ESP)) + SIB_Reg1(Ord(ESP)));
  end else begin
    WriteB(ModRM_Mod(0) + ModRM_Reg(Ord(Dst)) + ModRM_R_M(Ord(Reg[0])));
  end;)|)

// xxx reg, [reg+byte]
define(~mnerko8|, ~AsmCode($1, ~(Dst: Tx86Reg$3; K(Reg, Tx86Reg$3); Offset: Tx86b)|,
  AK(Reg);
  WriteB($2);
  if Reg[0] = ESP then begin
    WriteB(ModRM_Mod(1) + ModRM_Mod(Ord(Dst)) + ModRM_R_M(Ord(ESP)));
    WriteB(SIB_Mul(0) + SIB_Reg2(Ord(ESP)) + SIB_Reg1(Ord(ESP)));
  end else begin
    WriteB(ModRM_Mod(1) + ModRM_Mod(Ord(Dst)) + ModRM_R_M(Ord(Reg[0])));
  end;
  WriteB(Byte(Offset));)|)

// xxx reg, [reg + int]
define(~mnerko32|, ~AsmCode($1, ~(Dst: Tx86Reg$3; K(Reg, Tx86Reg$3); Offset: LongInt)|,
  AK(Reg);
  WriteB($2);
  if Reg[0] = ESP then begin
  end else begin
    WriteB(ModRM_Mod(2) + ModRM_Mod(Ord(Dst)) + ModRM_R_M(Ord(Reg[0])));
  end;
  WriteI(Offset);)|)

// xxx reg, [reg1 + reg2*mul + byte] 
define(~mnerkmo8|, ~AsmCode($1, ~(Dst: Tx86Reg$3; K(Reg1, Tx86Reg$3); K(Reg2, Tx86Reg$3); Mul: Byte; Offset: Tx86b)|,
  AK(Reg1);
  AK(Reg2);
  if Reg2[0] = ESP then begin
    // такое нельзя делать...
    Exit
  end;
  if (Mul and not 3) <> 0 then begin
    // такого тоже нельзя делать...
    Exit
  end;
  WriteB($2);
  WriteB(ModRM_Mod(1) + ModRM_Mod(Ord(Dst)) + ModRM_R_M(Ord(ESP)));
  WriteB(SIB_Mul(Byte(Mul)) + SIB_Reg2(Ord(Reg2[0])) + SIB_Reg1(Ord(Reg1[0])));
  WriteB(Byte(Offset));)|)

// xxx reg, [reg1 + reg2*mul + int] 
define(~mnerkmo32|, ~AsmCode($1, ~(Dst: Tx86Reg$3; K(Reg1, Tx86Reg$3); K(Reg2, Tx86Reg$3); Mul: Byte; Offset: LongInt)|,
  AK(Reg1)
  AK(Reg2)
  if Reg2[0] = ESP then begin
    // такое нельзя делать...
    Exit
  end;
  if Reg1[0] = EBP then begin
    // так тоже делать нельзя
    Exit
  end;
  case Mul of
    1: Mul := 0;
    2: Mul := 1;
    4: Mul := 2;
    8: Mul := 3;
  else
    // такого тоже нельзя делать...
    Exit
  end;
  WriteB($2);
  WriteB(ModRM_Mod(2) + ModRM_Mod(Ord(Dst)) + ModRM_R_M(Ord(ESP)));
  WriteB(SIB_Mul(Mul - 1) + SIB_Reg2(Ord(Reg2[0])) + SIB_Reg1(Ord(Reg1[0])));
  WriteI(Offset);)|)

mnerko32(Test,  Hex(90), XMM)
mneib(ADD,  Hex(04))
mneiw(ADD,  Hex(05))
mneid(ADD,  Hex(05))
mnegbib(ADD,  Hex(80))
mnegwiw(ADD,  Hex(81))
mnegdid(ADD,  Hex(81))
mnegwib(ADD,  Hex(83))
mnegdib(ADD,  Hex(83))
mnegdib(ADD,  Hex(83))
mne0(NOP,  Hex(90))
mne0(REPNE,  Hex(F2))
mne0(SCASD,  Hex(AF))
dnl mneri(MOV,  Hex(B8))
dnl mnerr(MOV,  Hex(8B))
dnl mnerk(MOV,  Hex(8B))
dnl mnerko8(MOV,  Hex(8B))
dnl mnerko32(MOV,  Hex(8B))
dnl mnerkmo8(MOV,  Hex(8B))
dnl mnerkmo32(MOV,  Hex(8B))

mnegbrb(MOV, Hex(88))
mnegwrw(MOV, Hex(89))
mnegdrd(MOV, Hex(89))
mnerbgb(MOV, Hex(8A))
mnerwgw(MOV, Hex(8B))
mnerdgd(MOV, Hex(8B))

mner(INC,  Hex(40))
mner(DEC,  Hex(48))
mner(PUSH, Hex(50))
mne(POP,  Hex(58))
)

uses
  DMachineCode;

type
  // x86 types
  Tx86b = record V: ShortInt; end;
  Tx86w = record V: SmallInt; end;
  Tx86d = record V: LongInt; end;
  Tx86q = record V: Int64; end;
  Tx86type = (x86BYTE, x86WORD, x86DWORD, x86QWORD);
  // general x86 registers
  Tx86Reg = (
                EAX =                 0,
                ECX =                 1,
                EDX =                 2,
                EBX =                 3,
                ESP =                 4,
                EBP =                 5,
                ESI =                 6,
                EDI =                 7
            );
  // 16-bit x86 registers (rw)
  Tx86RegW = (
                AX =                  0,
                CX =                  1,
                DX =                  2,
                BX =                  3,
                SP =                  4,
                BP =                  5,
                SI =                  6,
                DI =                  7
            );
  // 8-bit x86 registers (rb)
  Tx86RegB = (
                AL =                  0,
                CL =                  1,
                DL =                  2,
                BL =                  3,
                AH =                  4,
                CH =                  5,
                DH =                  6,
                BH =                  7
            );
  // x86 mm registers
  Tx86RegMM = (
                MM0 =                 0,
                MM1 =                 1,
                MM2 =                 2,
                MM3 =                 3,
                MM4 =                 4,
                MM5 =                 5,
                MM6 =                 6,
                MM7 =                 7
            );
  // x86 xmm registers
  Tx86RegXMM = (
                XMM0 =                 0,
                XMM1 =                 1,
                XMM2 =                 2,
                XMM3 =                 3,
                XMM4 =                 4,
                XMM5 =                 5,
                XMM6 =                 6,
                XMM7 =                 7
            );
  Tx86Mode = (X86_MODE_32, X86_MODE_16);

type
  Tx86 = class(TMachineCode)
  private
    FMode: Tx86Mode;
  public
    property Mode: Tx86Mode read FMode write FMode;
  public
    constructor Create(BaseSize: Integer);
    all_interface
  end;

function x86b(I: ShortInt): Tx86b;
function x86w(I: SmallInt): Tx86w;
function x86d(I: LongInt): Tx86d;

implementation

function x86b(I: ShortInt): Tx86b;
begin
  Move(I, Result, SizeOf(I));
end;

function x86w(I: SmallInt): Tx86w;
begin
  Move(I, Result, SizeOf(I));
end;

function x86d(I: LongInt): Tx86d;
begin
  Move(I, Result, SizeOf(I));
end;

constructor Tx86.Create(BaseSize: Integer);
begin
end;
all_implement
var
  c: Tx86;
initialization
  c := Tx86.Create(1000);
  c.MOV(EAX, 5);
  c.MOV(EBX, ECX);
  c.MOV(EDX, [ESP]);
  c.MOV(EDX, [ESP], [EAX], 4, x86b(67));
  c.MOV(EDX, [ESP], [EAX], 4, 1067);
  c.Free;
end.
