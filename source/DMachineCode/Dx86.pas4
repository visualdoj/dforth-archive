unit Dx86;

interface 
dnl(
changequote(~,|)

define(~all_implement|, ~|)
define(~all_interface|, ~// x86 mnemonics|)
define(~AsmCode|, ~
  define(~all_interface|, all_interface~
    procedure $1$2; overload;|)
  define(~all_implement|, all_implement~
procedure Tx86.$1$2;
begin
  $3
end;
|)
  |
)
// косвенность
define(~K|, ~const $1: array of $2|)
// assert косвенность
define(~AK|, ~if Length($1) <> 1 then begin
    AddError(X86_ERROR_K_PARAM_ONE, FSize, 'Parameter $1 must have only one element');
    Exit;
  end|)
define(~ModRM_Mod|, ~(($1) shl 6)|)
define(~ModRM_Reg|, ~(($1) shl 3)|)
define(~ModRM_R_M|, ~($1)|)
define(~ModRM|, ~WriteB(ModRM_Mod($1) + ModRM_Reg(Ord($2)) + ModRM_R_M(Ord($3)))|)
define(~SIB_Mul|, ~(($1) shl 6)|)
define(~SIB_Reg2|, ~(($1) shl 3)|)
define(~SIB_Reg1|, ~($1)|)
define(~SIB|, ~WriteB(SIB_Mul($1) + SIB_Reg2(Ord($2)) + SIB_Reg1(Ord($1)))|)
define(~MulToSIB|, ~case ($1) of
    1: ($2) := 0;
    2: ($2) := 1;
    3: ($2) := 2;
    4: ($2) := 3;
  else
    // TODO ТАК ДЕЛАТЬ НЕЛЬЗЯ!
  end|)
define(~SwitchMode|, ~if FMode = $1 then
    WriteB(Hex(66));|)
define(~CaseSwitchMode|, ~ifelse($1,~d|,  ~SwitchMode(X86_MODE_16)|,$1,~w|,~SwitchMode(X86_MODE_32)|)|)
define(~reverse|,~ifelse($4,~r|,$3$2$1,$1$2$3)|)
define(~params|,~reverse($1,;,$2,$3)|)

// xxx
define(~mne0|, ~AsmCode($1, ~|, WriteB($2);)|)

// xxx int
define(~mnei|, ~AsmCode($1, ~(I: LongInt)|, WriteB($2);
  WriteI(I);)
                AsmCode($1, ~(I: Tx86d)|, WriteB($2);
  WriteI(Integer(I));)|)
// xxx word
define(~mnew|, ~AsmCode($1, ~(W: Word)|, WriteB($2);
  WriteW(W);)
                AsmCode($1, ~(W: Tx86w)|, WriteB($2);
  WriteW(Word(W));)|)

// xxx k
define(~mnek|, ~AsmCode($1, ~(Reg: Tx86Reg$3)|, WriteB($2);
  ModRM(3, $4, Reg);)
                AsmCode($1, ~(Ptr: Pointer)|, WriteB($2);
  ModRM(0, $4, 5);
  Write(@Ptr, SizeOf(Ptr));)|)

// TODO
define(~mnegxix|, ~
 // registers
 define(~mnegr$1ib|, ~AsmCode($|~1, ~(Reg: Tx86Reg|$|~3~; B: Tx86b)|, WriteB($|~2);
  ModRM(3, Reg, 0);
  WriteB(Byte(B));)|)
 define(~mnegr$1iw|, ~AsmCode($|~1, ~(Reg: Tx86Reg|$|~3~; W: Tx86w)|, SwitchMode(X86_MODE_32)
  WriteB($|~2);
  ModRM(3, Reg, 0);
  WriteW(Word(W));)|)
 define(~mnegr$1id|, ~AsmCode($|~1, ~(Reg: Tx86Reg|$|~3~; D: LongInt)|, SwitchMode(X86_MODE_32)
  WriteB($|~2);
  ModRM(3, Reg, 0);
  WriteI(LongInt(D));)|)

 // [r], i
 define(~mnegm$1ib|, ~AsmCode($|~1, ~(K(Reg, Tx86Reg|$|~3~); B: Tx86b)|, WriteB($|~2);
  ModRM(0, 0, Reg);
  WriteB(Byte(B));)|)
 define(~mnegm$1iw|, ~AsmCode($|~1, ~(K(Reg, Tx86Reg|$|~3~); W: Tx86w)|, SwitchMode(X86_MODE_16)
  WriteB($|~2);
  ModRM(0, 0, Reg);
  WriteW(Word(W));)|)
 define(~mnegm$1id|, ~AsmCode($|~1, ~(K(Reg, Tx86Reg|$|~3~); D: LongInt)|, SwitchMode(X86_MODE_32)
  WriteB($|~2);
  ModRM(0, 0, Reg);
  WriteI(LongInt(D));)|)
|)

// косвенность
define(~mnerk|, ~
// [ptr]
 AsmCode($1, (Dst: Tx86Reg$3; const Ptr: array of Tx86d),  WriteB($2);
  ModRM(0, Dst, EBP);
  Write(@Ptr[0], SizeOf(Ptr[0]));)
 AsmCode($1, (Dst: Tx86Reg$3; const Ptr: array of Pointer),  WriteB($2);
  ModRM(0, Dst, EBP);
  Write(@Ptr[0], SizeOf(Ptr[0]));)
 AsmCode($1, (Dst: Tx86Reg$3; const Ptr: array of Cardinal),  WriteB($2);
  ModRM(0, Dst, EBP);
  Write(@Ptr[0], SizeOf(Ptr[0]));)
// [reg]
 AsmCode($1, (Dst: Tx86Reg$3; K(Src, Tx86Reg$3)),  AK(Src);
  WriteB($2);
  if Src[0] = EBP then begin
    ModRM(1, Dst, EBP);
    WriteB(0);
  end else if Src[0] = ESP then begin
    ModRM(0, Dst, ESP);
    SIB(0, ESP, ESP);
  end else begin
    ModRM(0, Dst, Src[0]);
  end;)
// [reg+b]
 AsmCode($1, (Dst: Tx86Reg$3; K(Src, Tx86Reg$3); Offset: Tx86b),  AK(Src);
  WriteB($2);
  if Src[0] = ESP then begin
    ModRM(1, Dst, ESP);
    SIB(0, ESP, ESP);
  end else begin
    ModRM(1, Dst, Src[0]);
  end;
  Write(@Offset, SizeOf(Offset));)
// [reg+d]
 AsmCode($1, (Dst: Tx86Reg$3; K(Src, Tx86Reg$3); Offset: Tx86d),
  AK(Src);
  WriteB($2);
  if Src[0] = ESP then begin
    ModRM(2, Dst, Src[0]);
    SIB(0, ESP, ESP);
  end else begin
    ModRM(2, Dst, Src[0]);
  end;
  Write(@Offset, SizeOf(Offset));)
// [reg+?]
 AsmCode($1, (Dst: Tx86Reg$3; K(Src, Tx86Reg$3); Offset: LongInt),  if (Low(ShortInt) <= Offset) and (Offset <= High(ShortInt)) then
    $1(Dst, Src, x86b(Offset))
  else
    $1(Dst, Src, x86d(Offset)))
// [reg+reg*Mul]
 AsmCode($1, (Dst: Tx86Reg$3; K(Src1, Tx86Reg$3); K(Src2, Tx86Reg$3); Mul: Tx86Mul),  AK(Src1); 
  AK(Src2);
  if Src2[0] = ESP then begin
    AddError(X86_ERROR_ESP, FSize, 'It''s impossible to use ESP register as second register');
    Exit;
  end;
  WriteB($2);
  if Src1[0] = EBP then begin
    ModRM(1, ESP, Dst);
  end else
    ModRM(0, ESP, Dst);
  SIB(Ord(Mul), Src2[0], Src1[0]);)
  if Src1[0] = EBP then
    WriteB(0);
// [reg+reg*Mul+b]
 AsmCode($1, (Dst: Tx86Reg$3; K(Src1, Tx86Reg$3); K(Src2, Tx86Reg$3); Mul: Tx86Mul; Offset: Tx86b),  AK(Src1); 
  AK(Src2);
  if Src2[0] = ESP then begin
    AddError(X86_ERROR_ESP, FSize, 'It''s impossible to use ESP register as second register');
    Exit;
  end;
  WriteB($2);
  ModRM(1, ESP, Dst);
  SIB(Ord(Mul), Src2[0], Src1[0]);
  Write(@Offset, SizeOf(Offset));)
// [reg+reg*Mul+d]
 AsmCode($1, (Dst: Tx86Reg$3; K(Src1, Tx86Reg$3); K(Src2, Tx86Reg$3); Mul: Tx86Mul; Offset: Tx86d),  AK(Src1); 
  AK(Src2);
  if Src2[0] = ESP then begin
    if Mul = m1 then begin
      $1(Dst, Src2, Src1, Mul, Offset);
      Exit;
    end;
    AddError(X86_ERROR_ESP, FSize, 'It''s impossible to use ESP register as second register');
    Exit;
  end;
  WriteB($2);
  ModRM(2, ESP, Dst);
  SIB(Ord(Mul), Src2[0], Src1[0]);
  Write(@Offset, SizeOf(Offset));)
// [reg+reg*Mul+?]
 AsmCode($1, (Dst: Tx86Reg$3; K(Src1, Tx86Reg$3); K(Src2, Tx86Reg$3); Mul: Tx86Mul; Offset: LongInt),  if (Low(ShortInt) <= Offset) and (Offset <= High(ShortInt)) then
    $1(Dst, Src1, Src2, Mul, x86b(Offset))
  else
    $1(Dst, Src1, Src2, Mul, x86d(Offset));) 
// [reg*Mul]
 AsmCode($1, (Dst: Tx86Reg$3; K(Src, Tx86Reg$3); Mul: Tx86Mul),  AK(Src); 
  if Src[0] = ESP then begin
    if Mul = m1 then begin
      $1(Dst, Src);
      Exit;
    end;
    AddError(X86_ERROR_ESP, FSize, 'It''s impossible to use ESP register as second register');
    Exit;
  end;
  WriteB($2);
  ModRM(0, ESP, Dst);
  SIB(Ord(Mul), ESP, Src[0]);)
// [reg*Mul+b]
 AsmCode($1, (Dst: Tx86Reg$3; K(Src, Tx86Reg$3); Mul: Tx86Mul; Offset: Tx86b),  AK(Src); 
  if Src[0] = ESP then begin
    if Mul = m1 then begin
      $1(Dst, Src);
      Exit;
    end;
    AddError(X86_ERROR_ESP, FSize, 'It''s impossible to use ESP register as second register');
    Exit;
  end;
  WriteB($2);
  ModRM(1, ESP, Dst);
  SIB(Ord(Mul), ESP, Src[0]);
  Write(@Offset, SizeOf(Offset));)
// [reg*Mul+d]
 AsmCode($1, (Dst: Tx86Reg$3; K(Src, Tx86Reg$3); Mul: Tx86Mul; Offset: Tx86d),  AK(Src); 
  if Src[0] = ESP then begin
    if Mul = m1 then begin
      $1(Dst, Src);
      Exit;
    end;
    AddError(X86_ERROR_ESP, FSize, 'It''s impossible to use ESP register as second register');
    Exit;
  end;
  WriteB($2);
  ModRM(2, ESP, Dst);
  SIB(Ord(Mul), ESP, Src[0]);
  Write(@Offset, SizeOf(Offset));)
|)

define(~mnekr|, ~
// [ptr]
 AsmCode($1, (const Ptr: array of Tx86d; Src: Tx86Reg$3),  WriteB($2);
  ModRM(0, Src, EBP);
  Write(@Ptr[0], SizeOf(Ptr[0]));)
 AsmCode($1, (const Ptr: array of Pointer; Src: Tx86Reg$3),  WriteB($2);
  ModRM(0, Src, EBP);
  Write(@Ptr[0], SizeOf(Ptr[0]));)
 AsmCode($1, (const Ptr: array of Cardinal; Src: Tx86Reg$3),  WriteB($2);
  ModRM(0, Src, EBP);
  Write(@Ptr[0], SizeOf(Ptr[0]));)
// [reg]
 AsmCode($1, (K(Dst, Tx86Reg$3); Src: Tx86Reg$3),  AK(Dst);
  WriteB($2);
  if Dst[0] = EBP then begin
    ModRM(1, Src, EBP);
    WriteB(0);
  end else if Dst[0] = ESP then begin
    ModRM(0, Src, ESP);
    SIB(0, ESP, ESP);
  end else begin
    ModRM(0, Src, Dst[0]);
  end;)
// [reg+b]
 AsmCode($1, (K(Dst, Tx86Reg$3); Offset: Tx86b; Src: Tx86Reg$3),  AK(Dst);
  WriteB($2);
  if Dst[0] = ESP then begin
    ModRM(1, Src, ESP);
    SIB(0, ESP, ESP);
  end else begin
    ModRM(1, Src, Dst[0]);
  end;
  Write(@Offset, SizeOf(Offset));)
// [reg+d]
 AsmCode($1, (K(Dst, Tx86Reg$3); Offset: Tx86d; Src: Tx86Reg$3),
  AK(Dst);
  WriteB($2);
  if Dst[0] = ESP then begin
    ModRM(2, Src, Dst[0]);
    SIB(0, ESP, ESP);
  end else begin
    ModRM(2, Src, Dst[0]);
  end;
  Write(@Offset, SizeOf(Offset));)
// [reg+?]
 AsmCode($1, (K(Dst, Tx86Reg$3); Offset: LongInt; Src: Tx86Reg$3),  if (Low(ShortInt) <= Offset) and (Offset <= High(ShortInt)) then
    $1(Dst, x86b(Offset), Src)
  else
    $1(Dst, x86d(Offset), Src))
// [reg+reg*Mul]
 AsmCode($1, (K(Dst1, Tx86Reg$3); K(Dst2, Tx86Reg$3); Mul: Tx86Mul; Src: Tx86Reg$3),  AK(Dst1); 
  AK(Dst2);
  if Dst2[0] = ESP then begin
    AddError(X86_ERROR_ESP, FSize, 'It''s impossible to use ESP register as second register');
    Exit;
  end;
  WriteB($2);
  if Dst1[0] = EBP then begin
    ModRM(1, ESP, Src);
  end else
    ModRM(0, ESP, Src);
  SIB(Ord(Mul), Dst2[0], Dst1[0]);)
  if Dst1[0] = EBP then
    WriteB(0);
// [reg+reg*Mul+b]
 AsmCode($1, (K(Dst1, Tx86Reg$3); K(Dst2, Tx86Reg$3); Mul: Tx86Mul; Offset: Tx86b; Src: Tx86Reg$3),  AK(Dst1); 
  AK(Dst2);
  if Dst2[0] = ESP then begin
    AddError(X86_ERROR_ESP, FSize, 'It''s impossible to use ESP register as second register');
    Exit;
  end;
  WriteB($2);
  ModRM(1, ESP, Src);
  SIB(Ord(Mul), Dst2[0], Dst1[0]);
  Write(@Offset, SizeOf(Offset));)
// [reg+reg*Mul+d]
 AsmCode($1, (K(Dst1, Tx86Reg$3); K(Dst2, Tx86Reg$3); Mul: Tx86Mul; Offset: Tx86d; Src: Tx86Reg$3),  AK(Dst1); 
  AK(Dst2);
  if Dst2[0] = ESP then begin
    if Mul = m1 then begin
      $1(Dst1, Dst2, Mul, Offset, Src);
      Exit;
    end;
    AddError(X86_ERROR_ESP, FSize, 'It''s impossible to use ESP register as second register');
    Exit;
  end;
  WriteB($2);
  ModRM(2, ESP, Src);
  SIB(Ord(Mul), Dst2[0], Dst1[0]);
  Write(@Offset, SizeOf(Offset));)
// [reg+reg*Mul+?]
 AsmCode($1, (K(Dst1, Tx86Reg$3); K(Dst2, Tx86Reg$3); Mul: Tx86Mul; Offset: LongInt; Src: Tx86Reg$3),  if (Low(ShortInt) <= Offset) and (Offset <= High(ShortInt)) then
    $1(Dst1, Dst2, Mul, x86b(Offset), Src)
  else
    $1(Dst1, Dst2, Mul, x86d(Offset), Src);) 
// [reg*Mul]
 AsmCode($1, (K(Dst, Tx86Reg$3); Mul: Tx86Mul; Src: Tx86Reg$3),  AK(Dst); 
  if Dst[0] = ESP then begin
    if Mul = m1 then begin
      $1(Dst, Src);
      Exit;
    end;
    AddError(X86_ERROR_ESP, FSize, 'It''s impossible to use ESP register as second register');
    Exit;
  end;
  WriteB($2);
  ModRM(0, ESP, Src);
  SIB(Ord(Mul), ESP, Dst[0]);)
// [reg*Mul+b]
 AsmCode($1, (K(Dst, Tx86Reg$3); Mul: Tx86Mul; Offset: Tx86b; Src: Tx86Reg$3),  AK(Dst); 
  if Dst[0] = ESP then begin
    if Mul = m1 then begin
      $1(Dst, Src);
      Exit;
    end;
    AddError(X86_ERROR_ESP, FSize, 'It''s impossible to use ESP register as second register');
    Exit;
  end;
  WriteB($2);
  ModRM(1, ESP, Src);
  SIB(Ord(Mul), ESP, Dst[0]);
  Write(@Offset, SizeOf(Offset));)
// [reg*Mul+d]
 AsmCode($1, (K(Dst, Tx86Reg$3); Mul: Tx86Mul; Offset: Tx86d; Src: Tx86Reg$3),  AK(Dst); 
  if Dst[0] = ESP then begin
    if Mul = m1 then begin
      $1(Dst, Src);
      Exit;
    end;
    AddError(X86_ERROR_ESP, FSize, 'It''s impossible to use ESP register as second register');
    Exit;
  end;
  WriteB($2);
  ModRM(2, ESP, Src);
  SIB(Ord(Mul), ESP, Dst[0]);
  Write(@Offset, SizeOf(Offset));)
|)

define(~mneki|, ~
|)

define(~mnej|, ~AsmCode($1, ~(Rel: Tx86$5)|,  CaseSwitchMode($5)
  WriteB($3); ifelse($2, ~2|,  
  WriteB($4);) 
  Write(@Rel, SizeOf(Rel));)|)

// 1 IMMEDIATE OPERAND
// i := immediate
// xxx byte
define(~mneib|, ~AsmCode($1, ~(B: Tx86b)|, WriteB($2);
  WriteB(Byte(B));)|)
// xxx word
define(~mneiw|, ~AsmCode($1, ~(W: Tx86w)|,SwitchMode(X86_MODE_16) 
  WriteB($2);
  WriteW(Word(W));)|)
// xxx dword
define(~mneid|, ~AsmCode($1, ~(D: Tx86d)|,SwitchMode(X86_MODE_32)
  WriteB($2);
  WriteI(LongInt(D));)|)
define(~mnei_|, ~
  mneib($1, $2, $5)
  mneiw($1, $3, $5)
  mneid($1, $4, $5)
  AsmCode($1, ~(D: LongInt)|, 
  if (D >= -128) and (D <= 127) then
    $1(x86b(ShortInt(D)))
  else if (D >= -32768) and (D <= 32767) then
    $1(x86w(SmallInt(D)))
  else
    $1(x86d(D));)|)

// REGISTER/MEMORY AND IMMEDIATE OPERANDS
// g := register/memory
define(~mnexix|, ~
 define(~mner$1ib|, ~AsmCode($|~1, ~(Reg: Tx86Reg|$|~3~; B: Tx86b)|, WriteB($|~2 + Ord(Reg));
  WriteB(Byte(B));)|)
 define(~mner$1iw|, ~AsmCode($|~1, ~(Reg: Tx86Reg|$|~3~; W: Tx86w)|, WriteB($|~2 + Ord(Reg));
  WriteW(Word(W));)|)
 define(~mner$1id|, ~AsmCode($|~1, ~(Reg: Tx86Reg|$|~3~; D: LongInt)|, WriteB($|~2 + Ord(Reg));
  WriteI(LongInt(D));)|)
  
 define(~mnem$1ib|, ~AsmCode($|~1, ~(Reg: Tx86Reg|$|~3~; T: )|, WriteB($|~2);
  $2
  WriteB(Byte(B));)|)
 define(~mnem$1iw|, ~AsmCode($|~1, ~(Reg: Tx86Reg|$|~3~; W: Tx86w)|, SwitchMode(X86_MODE_16);
  WriteB($|~2 + Ord(Reg));
  $2
  WriteW(Word(W));)|)
 define(~mnem$1id|, ~AsmCode($|~1, ~(Reg: Tx86Reg|$|~3~; D: LongInt)|, SwitchMode(X86_MODE_32);
  WriteB($|~2 + Ord(Reg));
  $2
  WriteI(LongInt(D));)|)|)

 define(~mneg$1ib|, ~|)
 define(~mneg$1iw|, ~|)
 define(~mneg$1id|, ~|)
mnexix(b, // TODO)
mnexix(w, // TODO)
mnexix(d, // TODO)

// REGISTER/MEMORY AND REGISTER OPERANDS
define(~mnerxrx|, ~
  define(~mner$1r$1|, ~AsmCode($|~1, (Dst, Src: Tx86Reg$|~3),  $2)|)
|)
mnerxrx(b, WriteB($2); 
  ModRM(3, Src, Dst);, 
  Tx86b, Byte);
mnerxrx(w, SwitchMode(X86_MODE_32) 
  WriteB($2);
  ModRM(3, Src, Dst);, 
  Tx86w, Word);
mnerxrx(d, SwitchMode(X86_MODE_16)
  WriteB($2); 
  ModRM(3, Src, Dst);, 
  LongIng, LongInt);
define(~mnemxrx|, ~
 define(~mner$1m$1|, ~AsmCode($|~1, (Reg: Tx86Reg$|~3; K(Mem, LongInt)), AK(Mem); 
  $2)|)
 define(~mnem$1r$1|, ~AsmCode($|~1, (K(Mem, LongInt); Reg: Tx86Reg$|~3), AK(Mem); 
  $2)|)
  |)
define(~mnerws|, ~AsmCode($1, (Reg: Tx86Reg$3; S: Tx86RegSreg),  WriteB($2); // TODO)|)
define(~mnesrw|, ~AsmCode($1, (S: Tx86RegSreg; Reg: Tx86Reg$3),  WriteB($2); // TODO)|)
define(~mnemws|, ~AsmCode($1, (M: Tx86w; S: Tx86RegSreg),  WriteB($2); // TODO)|)
define(~mnesmw|, ~AsmCode($1, (S: Tx86RegSreg; M: Tx86w),  WriteB($2); // TODO)|)

// xxx reg
define(~mner|, ~AsmCode($1, ~(Reg: Tx86Reg$3)|, WriteB($2 + Ord(Reg));)|)

// xxx reg int
define(~mneri|, ~AsmCode($1, ~(Reg: Tx86Reg$3; I: LongInt)|, WriteB($2 + Ord(Reg));
  SwitchMode(X86_MODE_32);
  WriteI(I);)|)

// xxx reg reg
define(~mnerr|, ~AsmCode($1, ~(Reg1, Reg2: Tx86Reg$3)|, WriteB($2); 
  WriteB(ModRM_Mod(3) + ModRM_Reg(Ord(Reg1)) + ModRM_R_M(Ord(Reg2)));)|)

// xxx reg [reg]
define(~mnerk_depr|, ~AsmCode($1, ~(Dst: Tx86Reg$3; K(Reg, Tx86Reg$3))|,
  AK(Reg);
  WriteB($2);
  if Reg[0] = EBP then begin
    WriteB(ModRM_Mod(1) + ModRM_Mod(Ord(Reg)) + ModRM_R_M(Ord(EBP)));
    WriteB(0);
  end else if Reg[0] = ESP then begin
    WriteB(ModRM_Mod(0) + ModRM_Reg(Ord(Reg)) + ModRM_R_M(Ord(ESP)));
    WriteB(SIB_Mul(0) + SIB_Reg2(Ord(ESP)) + SIB_Reg1(Ord(ESP)));
  end else begin
    WriteB(ModRM_Mod(0) + ModRM_Reg(Ord(Dst)) + ModRM_R_M(Ord(Reg[0])));
  end;)|)

// xxx reg, [reg+byte]
define(~mnerko8|, ~AsmCode($1, ~(Dst: Tx86Reg$3; K(Reg, Tx86Reg$3); Offset: Tx86b)|,
  AK(Reg);
  WriteB($2);
  if Reg[0] = ESP then begin
    WriteB(ModRM_Mod(1) + ModRM_Mod(Ord(Dst)) + ModRM_R_M(Ord(ESP)));
    WriteB(SIB_Mul(0) + SIB_Reg2(Ord(ESP)) + SIB_Reg1(Ord(ESP)));
  end else begin
    WriteB(ModRM_Mod(1) + ModRM_Mod(Ord(Dst)) + ModRM_R_M(Ord(Reg[0])));
  end;
  WriteB(Byte(Offset));)|)

// xxx reg, [reg + int]
define(~mnerko32|, ~AsmCode($1, ~(Dst: Tx86Reg$3; K(Reg, Tx86Reg$3); Offset: LongInt)|,
  AK(Reg);
  WriteB($2);
  if Reg[0] = ESP then begin
  end else begin
    WriteB(ModRM_Mod(2) + ModRM_Mod(Ord(Dst)) + ModRM_R_M(Ord(Reg[0])));
  end;
  WriteI(Offset);)|)

// xxx reg, [reg1 + reg2*mul + byte] 
define(~mnerkmo8|, ~AsmCode($1, ~(Dst: Tx86Reg$3; K(Reg1, Tx86Reg$3); K(Reg2, Tx86Reg$3); Mul: Byte; Offset: Tx86b)|,
  AK(Reg1);
  AK(Reg2);
  if Reg2[0] = ESP then begin
    AddError(X86_ERROR_ESP, FSize, 'It''s impossible to use ESP register as second register');
    Exit
  end;
  if (Mul and not 3) <> 0 then begin
    // такого тоже нельзя делать...
    Exit
  end;
  WriteB($2);
  WriteB(ModRM_Mod(1) + ModRM_Mod(Ord(Dst)) + ModRM_R_M(Ord(ESP)));
  WriteB(SIB_Mul(Byte(Mul)) + SIB_Reg2(Ord(Reg2[0])) + SIB_Reg1(Ord(Reg1[0])));
  WriteB(Byte(Offset));)|)

// xxx reg, [reg1 + reg2*mul + int] 
define(~mnerkmo32|, ~AsmCode($1, ~(Dst: Tx86Reg$3; K(Reg1, Tx86Reg$3); K(Reg2, Tx86Reg$3); Mul: Byte; Offset: LongInt)|,
  AK(Reg1)
  AK(Reg2)
  if Reg2[0] = ESP then begin
    // такое нельзя делать...
    AddError(X86_ERROR_ESP, FSize, 'It''s impossible to use ESP register as second register');
    Exit
  end;
  if Reg1[0] = EBP then begin
    // так тоже делать нельзя
    Exit
  end;
  case Mul of
    1: Mul := 0;
    2: Mul := 1;
    4: Mul := 2;
    8: Mul := 3;
  else
    // такого тоже нельзя делать...
    Exit
  end;
  WriteB($2);
  WriteB(ModRM_Mod(2) + ModRM_Mod(Ord(Dst)) + ModRM_R_M(Ord(ESP)));
  WriteB(SIB_Mul(Mul - 1) + SIB_Reg2(Ord(Reg2[0])) + SIB_Reg1(Ord(Reg1[0])));
  WriteI(Offset);)|)

// OPCODE reg, int
// OPCODE [...], int
define(~mnekdib|, ~AsmCode($1, ~(Dst: Tx86Reg$3; Imm: Byte)|,  WriteB($2);
  ModRM(3, Dst, $4);
  WriteB(Imm);)|)

mnekdib(ADD,  Hex(83), , 0)
mne0(NOP,  Hex(90))
mne0(REPNE,  Hex(F2))
mne0(SCASD,  Hex(AF))

mnerk(_OR, Hex(0B))
mnekr(_OR, Hex(09))

mnerk(ADC, Hex(13))
mnekr(ADC, Hex(11))

mnerk(SBB, Hex(1B))
mnekr(SBB, Hex(10))

mnerk(_AND, Hex(23))
mnekr(_AND, Hex(21))

dnl mnerk(SUB, Hex(23))
dnl mnekr(SUB, Hex(21))
dnl mnei_(SUB, Hex(23), Hex(23), Hex(23))
mnekdib(SUB,  Hex(83), , 5)

mnerk(_XOR, Hex(23))
mnekr(_XOR, Hex(21))

mnerk(CMP, Hex(3B))
mnekr(CMP, Hex(39))

mnekr(TEST, Hex(85))

mnerk(XCHG, Hex(87))

mnerbrb(MOV, Hex(88), B)
mnerwrw(MOV, Hex(89), W)
mnerdrd(MOV, Hex(89))
mnerbmb(MOV, Hex(8A), B)
mnerwmw(MOV, Hex(8B), W)
mnerdmd(MOV, Hex(8B))
mnembrb(MOV, Hex(88), B)
mnemwrw(MOV, Hex(89), W)
mnemdrd(MOV, Hex(89))
mnerbib(MOV, Hex(B0), B)
mnerwiw(MOV, Hex(B8), W)
mnerdid(MOV, Hex(B8))
mnerws(MOV, Hex(8C), W)
mnesrw(MOV, Hex(8E), W)
mnemws(MOV, Hex(8C), W)
mnesmw(MOV, Hex(8E), W)
mnerk(MOV, Hex(8B))
mnekr(MOV, Hex(89))

mner(INC,  Hex(40))
mner(DEC,  Hex(48))
mner(PUSH, Hex(50))
mnei(PUSH, Hex(68))
mner(POP,  Hex(58))

dnl mnei(CALL,  Hex(E8))
mnek(CALL,  Hex(FF), , 2)

mne0(RETnear, Hex(C3))
mne0(RETfar, Hex(CB))
mnew(RETnear, Hex(C2))
mnew(RETfar, Hex(CA))

mne0(LEAVE, Hex(C9))

mnej(JA,     1, Hex(77), Hex(00), b)
mnej(JAE,    1, Hex(73), Hex(00), b)
mnej(JB,     1, Hex(72), Hex(00), b)
mnej(JBE,    1, Hex(76), Hex(00), b)
mnej(JC,     1, Hex(72), Hex(00), b)
mnej(JCXZ,   1, Hex(E3), Hex(00), b)
mnej(JECXZ,  1, Hex(E3), Hex(00), b)
mnej(JRCXZ,  1, Hex(E3), Hex(00), b)
mnej(JE,     1, Hex(74), Hex(00), b)
mnej(JG,     1, Hex(7F), Hex(00), b)
mnej(JGE,    1, Hex(7D), Hex(00), b)
mnej(JL,     1, Hex(7C), Hex(00), b)
mnej(JLE,    1, Hex(7E), Hex(00), b)
mnej(JNA,    1, Hex(76), Hex(00), b)
mnej(JNAE,   1, Hex(72), Hex(00), b)
mnej(JNB,    1, Hex(73), Hex(00), b)
mnej(JNBE,   1, Hex(77), Hex(00), b)
mnej(JNE,    1, Hex(75), Hex(00), b)
mnej(JNG,    1, Hex(7E), Hex(00), b)
mnej(JNGE,   1, Hex(7C), Hex(00), b)
mnej(JNL,    1, Hex(7D), Hex(00), b)
mnej(JNLE,   1, Hex(7F), Hex(00), b)
mnej(JNO,    1, Hex(71), Hex(00), b)
mnej(JNP,    1, Hex(7B), Hex(00), b)
mnej(JNS,    1, Hex(79), Hex(00), b)
mnej(JNZ,    1, Hex(75), Hex(00), b)
mnej(JO,     1, Hex(70), Hex(00), b)
mnej(JP,     1, Hex(7A), Hex(00), b)
mnej(JPE,    1, Hex(7A), Hex(00), b)
mnej(JPO,    1, Hex(7B), Hex(00), b)
mnej(JS,     1, Hex(78), Hex(00), b)
mnej(JZ,     1, Hex(74), Hex(00), b)
mnej(JA,     1, Hex(0F), Hex(87), d)
mnej(JAE,    1, Hex(0F), Hex(83), d)
mnej(JB,     1, Hex(0F), Hex(82), d)
mnej(JBE,    1, Hex(0F), Hex(86), d)
mnej(JC,     1, Hex(0F), Hex(82), d)
mnej(JZ,     1, Hex(0F), Hex(84), d)
mnej(JG,     1, Hex(0F), Hex(84), d)
mnej(JGE,    1, Hex(0F), Hex(8F), d)
mnej(JL,     1, Hex(0F), Hex(8D), d)
mnej(JLE,    1, Hex(0F), Hex(8C), d)
mnej(JNA,    1, Hex(0F), Hex(8E), d)
mnej(JNAE,   1, Hex(0F), Hex(86), d)
mnej(JNB,    1, Hex(0F), Hex(82), d)
mnej(JNBE,   1, Hex(0F), Hex(83), d)
mnej(JNC,    1, Hex(0F), Hex(87), d)
mnej(JNE,    1, Hex(0F), Hex(85), d)
mnej(JNG,    1, Hex(0F), Hex(8E), d)
mnej(JNGE,   1, Hex(0F), Hex(8C), d)
mnej(JNL,    1, Hex(0F), Hex(8D), d)
mnej(JNLE,   1, Hex(0F), Hex(8F), d)
mnej(JNO,    1, Hex(0F), Hex(81), d)
mnej(JNP,    1, Hex(0F), Hex(8B), d)
mnej(JNS,    1, Hex(0F), Hex(89), d)
mnej(JNZ,    1, Hex(0F), Hex(85), d)
mnej(JO,     1, Hex(0F), Hex(80), d)
mnej(JP,     1, Hex(0F), Hex(8A), d)
mnej(JPE,    1, Hex(0F), Hex(8A), d)
mnej(JPO,    1, Hex(0F), Hex(8B), d)
mnej(JS,     1, Hex(0F), Hex(88), d)
mnej(JA,     1, Hex(0F), Hex(87), w)
mnej(JAE,    1, Hex(0F), Hex(83), w)
mnej(JB,     1, Hex(0F), Hex(82), w)
mnej(JBE,    1, Hex(0F), Hex(86), w)
mnej(JC,     1, Hex(0F), Hex(82), w)
mnej(JZ,     1, Hex(0F), Hex(84), w)
mnej(JG,     1, Hex(0F), Hex(84), w)
mnej(JGE,    1, Hex(0F), Hex(8F), w)
mnej(JL,     1, Hex(0F), Hex(8D), w)
mnej(JLE,    1, Hex(0F), Hex(8C), w)
mnej(JNA,    1, Hex(0F), Hex(8E), w)
mnej(JNAE,   1, Hex(0F), Hex(86), w)
mnej(JNB,    1, Hex(0F), Hex(82), w)
mnej(JNBE,   1, Hex(0F), Hex(83), w)
mnej(JNC,    1, Hex(0F), Hex(87), w)
mnej(JNE,    1, Hex(0F), Hex(85), w)
mnej(JNG,    1, Hex(0F), Hex(8E), w)
mnej(JNGE,   1, Hex(0F), Hex(8C), w)
mnej(JNL,    1, Hex(0F), Hex(8D), w)
mnej(JNLE,   1, Hex(0F), Hex(8F), w)
mnej(JNO,    1, Hex(0F), Hex(81), w)
mnej(JNP,    1, Hex(0F), Hex(8B), w)
mnej(JNS,    1, Hex(0F), Hex(89), w)
mnej(JNZ,    1, Hex(0F), Hex(85), w)
mnej(JO,     1, Hex(0F), Hex(80), w)
mnej(JP,     1, Hex(0F), Hex(8A), w)
mnej(JPE,    1, Hex(0F), Hex(8A), w)
mnej(JPO,    1, Hex(0F), Hex(8B), w)
mnej(JS,     1, Hex(0F), Hex(88), w)
)

uses
  DMachineCode;

type
  // x86 types
  Tx86b = packed record V: ShortInt; end;
  Tx86w = packed record V: SmallInt; end;
  Tx86d = packed record V: LongInt;  end;
  Tx86q = packed record V: Int64;    end;
  Tx86type = (x86BYTE, x86WORD, x86DWORD, x86QWORD);
  // general x86 registers
  Tx86Reg = (
                EAX =                 0,
                ECX =                 1,
                EDX =                 2,
                EBX =                 3,
                ESP =                 4,
                EBP =                 5,
                ESI =                 6,
                EDI =                 7
            );
  // 16-bit x86 registers (rw)
  Tx86RegW = (
                AX =                  0,
                CX =                  1,
                DX =                  2,
                BX =                  3,
                SP =                  4,
                BP =                  5,
                SI =                  6,
                DI =                  7
            );
  // 8-bit x86 registers (rb)
  Tx86RegB = (
                AL =                  0,
                CL =                  1,
                DL =                  2,
                BL =                  3,
                AH =                  4,
                CH =                  5,
                DH =                  6,
                BH =                  7
            );
  // x86 mm registers
  Tx86RegMM = (
                MM0 =                 0,
                MM1 =                 1,
                MM2 =                 2,
                MM3 =                 3,
                MM4 =                 4,
                MM5 =                 5,
                MM6 =                 6,
                MM7 =                 7
            );
  // x86 xmm registers
  Tx86RegXMM = (
                XMM0 =                 0,
                XMM1 =                 1,
                XMM2 =                 2,
                XMM3 =                 3,
                XMM4 =                 4,
                XMM5 =                 5,
                XMM6 =                 6,
                XMM7 =                 7
            );
  // x86 segment register
  Tx86RegSreg = ( 
                ES =                    0,
                CS =                    1,
                SS =                    2,
                DS =                    3,
                FS =                    4,
                GS =                    5
                );
  // x86 modes
  Tx86Mode = (X86_MODE_32, X86_MODE_16);
  // coeff in [register1 + register2*mul + offset]
  Tx86Mul = (m1 = 0, m2 = 1, m4 = 2, m8 = 3);

const
  NOREG = ESP;
  // errors
  X86_ERROR_ESP                                 = 1;
  X86_ERROR_K_PARAM_ONE                         = 2;

type
  Tx86 = class(TMachineCode)
  private
    FMode: Tx86Mode;
  public
    property Mode: Tx86Mode read FMode write FMode;
  public
    constructor Create(BaseSize: Integer);
    all_interface
  end;

function x86b(I: ShortInt): Tx86b;
function x86w(I: SmallInt): Tx86w;
function x86d(I: LongInt): Tx86d;

implementation

function x86b(I: ShortInt): Tx86b;
begin
  Move(I, Result, SizeOf(I));
end;

function x86w(I: SmallInt): Tx86w;
begin
  Move(I, Result, SizeOf(I));
end;

function x86d(I: LongInt): Tx86d;
begin
  Move(I, Result, SizeOf(I));
end;

constructor Tx86.Create(BaseSize: Integer);
begin
  inherited Create(BaseSize);
  FMode := X86_MODE_32;
end;
all_implement
var
  c: Tx86;
initialization
  c := Tx86.Create(1000);
  c.MOV(EAX, 5);
  c.MOV(EBX, ECX);
  //c.MOV(EDX, [ESP]);
  //c.MOV(EDX, [ESP], [EAX], 4, x86b(67));
  //c.MOV(EDX, [ESP], [EAX], 4, 1067);
  c.Free;
end.
