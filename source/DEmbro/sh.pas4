unit sh;

interface

uses
  {$I units.inc},
  strings,
  stream,
  pool;

type
TShLineOptions = record
  PipeStr: PAnsiChar; // default: '|'
  InFileStr: PAnsiChar; // default: '<'
  OutFileStr: PAnsiChar; // default: '>'
  AppendFileStr: PAnsiChar; // default: '>>'
  SeqStr: PAnsiChar; // default: '&&'
  NotSeqStr: PAnsiChar; // default: '||'
  ParallelStr: PAnsiChar; // default: '&'
end;

TShBase = object
 protected
  FPool: TPool;
  FDone: Boolean;
  FExitCode: Integer;
  FInStream: PInStream;
  FOutStream: POutStream;
 public
  procedure _Run; virtual;
  procedure _Update; virtual;
  function WaitDone: Integer;
  function RunAndWait: Integer;
  property Done: Boolean read FDone;
  property ExitCode: Integer read FExitCode;
  property InStream: PInStream read FInStream;
  property OutStream: POutStream read FOutStream;
end;

// cmd ..
TShSimple = object(TShBase)
  procedure ReadFromLine(Line: PAnsiChar);
  procedure ReadFromLine(Line: PAnsiChar; const Options: TShLineOptions);
  procedure ReadFromLineOwn(Line: PAnsiChar);
  procedure ReadFromLineOwn(Line: PAnsiChar; const Options: TShLineOptions);
  procedure _Update; virtual;
  procedure Update;
end;

// cmd .. | cmd .. | cmd .. | ...
TShPipe = object(TShBase)
  procedure ReadFromLine(Line: PAnsiChar);
  procedure ReadFromLine(Line: PAnsiChar; const Options: TShLineOptions);
  procedure ReadFromLineOwn(Line: PAnsiChar);
  procedure ReadFromLineOwn(Line: PAnsiChar; const Options: TShLineOptions);
  procedure _Update; virtual;
  procedure Update;
end;

// cmd .. | cmd .. | cmd .. | ... < in > out
TShPipeFiles = object(TShBase)
  procedure ReadFromLine(Line: PAnsiChar);
  procedure ReadFromLine(Line: PAnsiChar; const Options: TShLineOptions);
  procedure ReadFromLineOwn(Line: PAnsiChar);
  procedure ReadFromLineOwn(Line: PAnsiChar; const Options: TShLineOptions);
  procedure _Update; virtual;
  procedure Update;
end;

// pipe1 && pipe2 || pipe3 && ...
TShSequence = object(TShBase)
  procedure ReadFromLine(Line: PAnsiChar);
  procedure ReadFromLine(Line: PAnsiChar; const Options: TShLineOptions);
  procedure ReadFromLineOwn(Line: PAnsiChar);
  procedure ReadFromLineOwn(Line: PAnsiChar; const Options: TShLineOptions);
  procedure _Update; virtual;
  procedure Update;
end;

// seq1 & seq2 & seq3 ....
TShParallel = object(TShBase)
  procedure ReadFromLine(Line: PAnsiChar);
  procedure ReadFromLine(Line: PAnsiChar; const Options: TShLineOptions);
  procedure ReadFromLineOwn(Line: PAnsiChar);
  procedure ReadFromLineOwn(Line: PAnsiChar; const Options: TShLineOptions);
  procedure _Update; virtual;
  procedure Update;
end;

implementation

function StrChr(S: PAnsiChar; C: TAnsiChar): PAnsiChar;
begin
  Result := S;
  while (Ord(Result^) > 0) and (Result^ <> C) do
    Inc(Result);
  if Ord(Result^) = 0 then
    Result := nil;
end;

function StrStr(S, Sub: PAnsiChar; SubLen: Integer): PAnsiChar; overload;
begin
  if Sub[0] = #0 then
    RETURN(S);
  Result := StrChr(S, Sub[0]);
  while Result <> nil do
    if MemCmp(@S[1], @Sub[1], SubLen - 1) then
      Exit
    else
      Result := StrChr(S, Sub[0]);
end;

function StrStr(S, Sub: PAnsiChar): PAnsiChar; overload;
begin
  Result := StrStr(S, Sub, StrLen(Sub));
end;

function StrListNext(var Left, Right: PAnsiChar; Delim: Char): Boolean; overload;
begin
  if Right = nil then
    RETURN(False);
  Result := True;
  Left := Right;
  Right := StrChr(Right, Delim);
  if Right = nil then
    Exit;
  Right[0] := #0;
  Inc(Right);
end;

function StrListNext(var Left, Right, Delim: PAnsiChar; Len: Integer): Boolean; overload;
begin
  if Right = nil then
    RETURN(False);
  Result := True;
  Left := Right;
  Right := StrStr(Right, Delim, Len);
  if Right = nil then
    Exit;
  Right[0] := #0;
  Inc(Right, Len);
end;

function StrListNext(var Left, Right, Delim: PAnsiChar): Boolean; overload;
begin
  Result := StrListNext(Left, Right, Delim, StrLen(Delim));
end;

// {{{ TShBase
function TShBase.WaitDone: Integer;
begin
  while not FDone do
    _Update;
  Result := FExitCode;
end;

function TShBase.RunAndWait: Integer;
begin
  _Run;
  Result := WaitDone;
end;
// }}}
// {{{ TShSimple
procedure TShSimple.ReadFromLine(Line: PAnsiChar);
begin
  FPool.Clear;
  ReadFromLineOwn(FPool.Append(Line));
end;

procedure TShSimple.ReadFromLine(Line: PAnsiChar; const Options: TShLineOptions);
begin
  FPool.Clear;
  ReadFromLineOwn(FPool.Append(Line));
end;

procedure TShSimple.ReadFromLineOwn(Line: PAnsiChar);
begin
end;

procedure TShSimple.ReadFromLineOwn(Line: PAnsiChar; const Options: TShLineOptions);
begin
end;

procedure TShSimple._Update;
begin
  Update;
end;

procedure TShSimple.Update;
begin
end;
// }}}
// {{{ TShPipe
procedure TShPipe.ReadFromLine(Line: PAnsiChar);
begin
  FPool.Clear;
  ReadFromLineOwn(FPool.Append(Line));
end;

procedure TShPipe.ReadFromLine(Line: PAnsiChar; const Options: TShLineOptions);
begin
  FPool.Clear;
  ReadFromLineOwn(FPool.Append(Line));
end;

procedure TShPipe.ReadFromLineOwn(Line: PAnsiChar);
var
  Left: PAnsiChar;
begin
  while StrListNext(Left, Line, '|') do
    AddPipe(Left);
end;

procedure TShPipe.ReadFromLineOwn(Line: PAnsiChar; const Options: TShLineOptions);
begin
  while StrListNext(Left, Line, Options.PipeStr) do
    AddPipe(Left);
end;

procedure TShPipe._Update;
begin
  Update;
end;

procedure TShPipe.Update;
begin
end;
// }}}
// {{{ TShPipeFiles
procedure TShPipeFiles.ReadFromLine(Line: PAnsiChar);
begin
  FPool.Clear;
  ReadFromLineOwn(FPool.Append(Line));
end;

procedure TShPipeFiles.ReadFromLine(Line: PAnsiChar; const Options: TShLineOptions);
begin
  FPool.Clear;
  ReadFromLineOwn(FPool.Append(Line));
end;

procedure TShPipeFiles.ReadFromLineOwn(Line: PAnsiChar);
begin
end;

procedure TShPipeFiles.ReadFromLineOwn(Line: PAnsiChar; const Options: TShLineOptions);
begin
end;

procedure TShPipeFiles._Update;
begin
  Update;
end;

procedure TShPipeFiles.Update;
begin
end;
// }}}
// {{{ TShSequence
procedure TShSequence.ReadFromLine(Line: PAnsiChar);
begin
  FPool.Clear;
  ReadFromLineOwn(FPool.Append(Line));
end;

procedure TShSequence.ReadFromLine(Line: PAnsiChar; const Options: TShLineOptions);
begin
  FPool.Clear;
  ReadFromLineOwn(FPool.Append(Line));
end;

procedure TShSequence.ReadFromLineOwn(Line: PAnsiChar);
begin
  ReadFromLineOwn(Line, DefaultOptions);
end;

procedure TShSequence.ReadFromLineOwn(Line: PAnsiChar; const Options: TShLineOptions);
var
  SubSeq, Left: PAnsiChar;
begin
  while StrListNext(SubSeq, Line, Options.SeqStr) do begin
    StrListNext(Left, SubSeq, Options.NotSeqStr);
    AddSeqItem(Left, True);
    while StrListNext(Left, SubSeq, Options.NotSeqStr) do
      AddSeqItem(Left, False);
  end;
end;

procedure TShSequence._Update;
begin
  Update;
end;

procedure TShSequence.Update;
begin
end;
// }}}
// {{{ TShParallel
procedure TShParallel.ReadFromLine(Line: PAnsiChar);
begin
  FPool.Clear;
  ReadFromLineOwn(FPool.Append(Line));
end;

procedure TShParallel.ReadFromLine(Line: PAnsiChar; const Options: TShLineOptions);
begin
  FPool.Clear;
  ReadFromLineOwn(FPool.Append(Line));
end;

procedure TShParallel.ReadFromLineOwn(Line: PAnsiChar);
var
  Left: PAnsiChar;
begin
  while StrListNext(Left, Line, '&') do
    AddParallelItem(Left);
end;

procedure TShParallel.ReadFromLineOwn(Line: PAnsiChar; const Options: TShLineOptions);
var
  Left: PAnsiChar;
begin
  while StrListNext(Left, Line, Options.ParallelStr) do
    AddParallelItem(Left);
end;

procedure TShParallel._Update;
begin
  Update;
end;

procedure TShParallel.Update;
begin
end;
// }}}

end.
