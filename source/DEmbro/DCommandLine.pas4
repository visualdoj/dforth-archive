unit DCommandLine;

interface

//uses
//  {$I units.inc};

var
  CommandLine: record
                 FileNames: array of String;
                 Repl: Boolean;
                 ReplDefault: Boolean;
                 ReplDefined: Boolean;
                 System: String;
                 Error: Boolean;
                 Help: Boolean;
                 Debug: Boolean;
                 LibNameDefault: String;
               end;

procedure ParseCommandLine;

implementation

procedure SetDefault;
begin
  CommandLine.Error         := False;
  CommandLine.Repl          := True;
  CommandLine.ReplDefault   := True;
  CommandLine.ReplDefined   := False;
  CommandLine.System        := "core" + DirectorySeparator + "default" + DirectorySeparator + "system.de";
  CommandLine.Debug         := False;
  {$IFDEF WIN32}
  CommandLine.LibNameDefault := "de32.dll";
  {$ENDIF}
  {$IFDEF UNIX}
  CommandLine.LibNameDefault := "libde32.so";
  {$ENDIF}
end;

procedure Error(Param: String);
begin
  CommandLine.Error := True;
  Writeln("Error: " + Param);
end;

procedure Unknown(Param: String);
begin
  CommandLine.Error := True;
  Writeln("Error: unknown commandline " + Param);
end;

procedure PrintHelp;
begin
  Writeln("Usage: dembro32 <option> <option> ... <option>");
  Writeln("  <option> -e <filename>           see --evaluate");
  Writeln("           -r                      see --norepl");
  Writeln("           +r                      see --repl");
  Writeln("           -s                      see --nosystem");
  Writeln("           +s <filename>           see --system");
  Writeln("           -h                      see --help");
  Writeln("           --evaluate <filename>   evaluate file");
  Writeln("           --repl                  run REPL after evaluated all files (default)");
  Writeln("           --norepl                do not run REPL after evaluated all files");
  Writeln("           --nosystem              run dembro without system file");
  Writeln("           --system <filename>     change system file location");
  Writeln("                                   (default ""core\default\system.de"")");  
  Writeln("           --help                  print this help");
  Writeln("           --subhelp               print help for subprograms");
  Writeln("           <other>                 uses as filename to evaluate");  
  Writeln("Examples: dembro32");  
  Writeln("          dembro32 source1.de source2.de -r");  
  CommandLine.Help := True;
end;

procedure PrintSubHelp;
begin
  Writeln("Usage: dembro32 --subprog <prog> <option> ... <option>");
  Writeln("  <prog> sh           see --evaluate");
  Writeln("Examples: dembro32 --subprog sh ping 127.0.0.1");  
  CommandLine.Help := True;
end;

procedure ParseCommandLine;
var
  I, J: Integer;
  C: String; // Currect
begin
  SetDefault;
  I := 1;
  while I <= ParamCount do begin
    C := ParamStr(I);
    Inc(I);
    // длинный параметр
    if Pos("--", C) = 1 then begin
      if C = "--help" then
        PrintHelp
      else if C = "--evaluate" then begin
        SetLength(CommandLine.FileNames, Length(CommandLine.FileNames) + 1);
        if I > ParamCount then begin
          Error("there is no filename parameter passed to option --evaluate");
          Exit;
        end;
        CommandLine.FileNames[High(CommandLine.FileNames)] := ParamStr(I);
        CommandLine.ReplDefault := False;
        Inc(I);
      end else if C = "--repl" then begin
        CommandLine.Repl := True;
        CommandLine.ReplDefined := True;
      end else if C = "--norepl" then begin
        CommandLine.Repl := False;
        CommandLine.ReplDefined := True;
      end else if C = "--system" then begin
        if I > ParamCount then begin
          Error("there is no filename parameter passed to option --system");
          Exit;
        end;
        CommandLine.System := ParamStr(I);
        Inc(I);
      end else if C = "--debug" then begin
        CommandLine.Debug := True;
      end else begin
        Unknown(C);
        Exit;
      end;

    // короткий параметр
    end else if Pos("-", C) <> 0 then begin
      for J := 2 to Length(C) do
        {if C[J] = "c" then begin
          // CommandLine.Source := ParamStr(I);
          //CommandLine.Mode := CMD_EXE;
          Inc(I);
        end else if C[J] = "o" then begin
          CommandLine.Dest := ParamStr(I);
          Inc(I);
        end else} 
        if C[J] = "e" then begin
          SetLength(CommandLine.FileNames, Length(CommandLine.FileNames) + 1);
          if I > ParamCount then begin
            Error("there is no filename parameter passed to option --evaluate");
            Exit;
          end;
          CommandLine.FileNames[High(CommandLine.FileNames)] := ParamStr(I);
          CommandLine.ReplDefault := False;
          Inc(I);
        end else if C[J] = "r" then begin
          CommandLine.Repl := False;
          CommandLine.ReplDefined := True;
        end else if C[J] = "s" then begin
          CommandLine.System := "";
          Inc(I);
        end else if C[J] = "h" then begin
          PrintHelp;
        end else if C[J] = "d" then begin
          CommandLine.Debug := True;
        end else begin
          Unknown("flag " + C);
          Exit;
        end;

    // +x параметр
    end else if C[1] = "+" then begin
      for J := 2 to Length(C) do
        if C[J] = "r" then begin
          CommandLine.Repl := True;
          CommandLine.ReplDefault := True;
        end else if C[J] = "s" then begin
          if I > ParamCount then begin
            Error("there is no filename parameter passed to option +s");
            Exit;
          end;
          CommandLine.System := ParamStr(I);
          Inc(I);
        end else begin
          Unknown("flag " + C);
          Exit;
        end;

    // просто параметр ...
    end else begin
      //Unknown(C);
      //Exit;
      SetLength(CommandLine.FileNames, Length(CommandLine.FileNames) + 1);
      CommandLine.FileNames[High(CommandLine.FileNames)] := C;
      CommandLine.ReplDefault := False;
    end;
  end;
end;

end.
