unit DEmbroCore;

interface

uses
  DUtils;

const
  BOOL_FALSE                            = 0;
  BOOL_TRUE                             = -1;
  
  CELL_SIZE                             = SizeOf(Integer);

  OK                                    = 0;
  ERROR_EMBRO_NOT_ALIGNED_ALLOT         = 1;
  ERROR_EMBRO_TOO_BIG_ALLOT             = 2;
  ERROR_EMBRO_NOT_ALIGNED_CLEAR         = 3;
  ERROR_EMBRO_TOO_BIG_CLEAR             = 4;

  CR_windows: array[0..1] of Byte       = ( 13, 10 );  

type
  TError                                = Integer;
  TCell                                 = Integer; 
  TInt                                  = Integer;
  TUInt                                 = Cardinal;
  TPtr                                  = Pointer;

  PForthCommand = ^TForthCommand;
  TCode = procedure (Machine: Pointer; Command: PForthCommand); register;
  TForthCommand = record 
          Code: TCode;
          Data: Pointer;
          Flags: Byte;
          Name: PAnsiChar; 
          Param: Pointer;
        end;
  TXt = PForthCommand;

  TStrRec = packed record
    Ref: TInt;
    Len: TInt;
    Width: TInt;
    Sym: array[0..1] of Byte;
  end;
  PStrRec = ^TStrRec;
  TStr = PStrRec;

  TFixed = packed record
    Len: TInt;
    P: PAnsiChar;
  end;
  PFixed = ^TFixed;

function Align(Value: Cardinal; _Unit: Cardinal = CELL_SIZE): Cardinal;

function MemCmp(P, Q: PArrayOfByte; Size: Integer): Integer;

function MakeString(P: PArrayOfByte; Len: Integer): TString;

implementation

function Align;
var
  R: Cardinal;
begin
  R := Value mod _Unit;
  if R = 0 then
    Result := Value
  else
    Result := Value + _Unit - R;
end;

function MemCmp(P, Q: PArrayOfByte; Size: Integer): Integer;
begin
  while Size > 0 do begin
    Result := Integer(P[0]) - Integer(Q[0]);
    if Result <> 0 then
      Exit;
    Dec(Size);
    Inc(P);
    Inc(Q);
  end;
end;

function MakeString(P: PArrayOfByte; Len: Integer): TString;
begin
  SetLength(Result, Len);
  Move(P[0], Result[1], Len);
end;

end.
