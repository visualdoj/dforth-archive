unit DCommandsFiles;

interface

define(`body', `begin with Machine^ do begin $1 end; end;')
define(`cmdhdr', `(Machine: TForthMachine; Command: PForthCommand)')

uses
  {$I units.inc},

  strings,

  DEmbroCore,
  DCommandsStrings,
  DForthMachine;

  procedure file_exists cmdhdr;
  procedure file_open cmdhdr;
  procedure file_close cmdhdr;
  procedure file_w cmdhdr;
  procedure file_r cmdhdr;
  procedure file_write cmdhdr;
  procedure file_read cmdhdr;
  procedure file_byte_read cmdhdr;
  procedure file_str_write cmdhdr; 
  procedure file_str_read cmdhdr; 
  procedure file_size cmdhdr;
  procedure star_cr cmdhdr;
  procedure star_cr_hash cmdhdr;
  procedure file_cr cmdhdr;

procedure LoadCommands(Machine: TForthMachine);

implementation

      type
        PdfFile = ^TdfFile;
        TdfFile = record
          Data: TData;
          Name: String;
          Mode: TInt;
        end;
      procedure file_exists cmdhdr;
      var
        S: TString;
        B: TStr;
      begin
        B := str_top(Machine);
        S := TString(PChar(@(B^.Sym[0])));
        Machine.WUI(Ord(FileExists(S))*BOOL_TRUE);
      end;
      procedure file_open cmdhdr; 
      var 
        F: PdfFile;
        B: TStr;
      body( 
         New(F);
         F^.Mode := WOI; 
         B := str_pop(Machine); 
         F^.Name := PChar(@(PStrRec(B)^.Sym[0]));
         if F^.Mode = DF_FILE_R then
           F^.Data := TData.Create(F^.Name)
         else
           F^.Data := TData.Create;
         WUP(F); 
         DelRef(B);
      )
      procedure file_close cmdhdr; 
      var
        F: PdfFile;
      body( 
        F := WOP;
        if F^.Mode = DF_FILE_W then
          F^.Data.WriteToFile(F^.Name);
        F^.Data.Free;
        Dispose(F); 
      )
      procedure file_w cmdhdr; body( WUI(DF_FILE_W) )
      procedure file_r cmdhdr; body( WUI(DF_FILE_R) )
      procedure file_write cmdhdr; 
      var
        Src: Pointer;
        I: TInt;
        F: PdfFile;
      body( 
        F := WOP;
        I := WOI;
        Src := WOP;
        F^.Data.WriteVar(Src, I);
      )
      procedure file_read cmdhdr;
      var
        Src: Pointer;
        I: TInt;
        F: PdfFile;
      body( 
        F := WOP;
        I := WOI;
        Src := WOP;
        F^.Data.WriteVar(Src, I);
      )
      procedure file_byte_read cmdhdr;
      var
        F: PdfFile;
      body( 
        F := WOP;
        WUI(F^.Data.ReadByte);
      )
      procedure file_str_write cmdhdr; 
      var
        B: TStr;
        F: PdfFile;
      body( 
        F := WOP;
        B := str_pop(Machine);
        F^.Data.WriteVar(@B^.Sym[0], B^.Len * B^.Width);
      )
      procedure file_str_read cmdhdr; 
      var
        B: TStr;
        F: PdfFile;
        Len: Integer;
        Buffer: array of Byte;
      body( 
        F := WOP;
        SetLength(Buffer, 80);
        Len := 0;
        Buffer[Len] := F^.Data.ReadByte;
        while (Buffer[Len] <> 13) and not F^.Data.IsEmpty do begin
          Inc(Len);
          if Len > High(Buffer) then
            SetLength(Buffer, Length(Buffer)*2);
          Buffer[Len] := F^.Data.ReadByte;
        end;
        B := CreateStr(1, Len);
        Move(Buffer[0], B^.Sym[0], Len);
        B^.Sym[Len] := 0;
        str_push(Machine, B);
      )
      procedure file_size cmdhdr; body( WUI(PdfFile(WOP)^.Data.Size); )
      procedure star_cr cmdhdr; body( WUP(@CR_windows[0]) )
      procedure star_cr_hash cmdhdr; body( WUI(SizeOf(CR_windows)) )
      procedure file_cr cmdhdr; 
      var 
        F: PdfFile; 
      body(  
        F := WOP;
        F^.Data.WriteVar(@CR_windows[0], SizeOf(CR_windows));
      )

procedure LoadCommands(Machine: TForthMachine);
begin
  Machine.AddCommand('file-exists', file_exists);
  Machine.AddCommand('file-open', file_open);
  Machine.AddCommand('file-close', file_close);
  Machine.AddCommand('file-w', file_w);
  Machine.AddCommand('file-r', file_r);
  Machine.AddCommand('file-str-write', file_str_write);
  Machine.AddCommand('file-str-read', file_str_read);
  Machine.AddCommand('file-write', file_write);
  Machine.AddCommand('file-read', file_read);
  Machine.AddCommand('byte-file-read', file_byte_read);
  Machine.AddCommand('file-size', file_size);
  Machine.AddCommand('*cr', star_cr);
  Machine.AddCommand('*cr', star_cr_hash);
  Machine.AddCommand('file-cr', file_cr);  
end;

end.
