unit DCommandsNumberArithmetic;

interface

uses
  {$I units.inc},

  DCommandsStrings,
  DForthMachine;

changequote(~,|)
define(~genname|, ~ifelse($1, ~|, $2, len($1), ~1|, $2, $1-$2)|)

{$IFNDEF FLAG_FPC}{$REGION 'number_arithmetic_commands'}{$ENDIF}
define(~number_arithmetic_commands|, 
  ~
  procedure $1_push  cmdhdr;
  procedure $1_interpret_push  cmdhdr;
  procedure $1_compile_push  cmdhdr;
  procedure $1_run_push  cmdhdr;
  procedure $1_1_plus cmdhdr;
  procedure $1_1_minus cmdhdr;
  procedure $1_div cmdhdr;
  procedure $1_mod cmdhdr;
  procedure $1_divmod cmdhdr;
  procedure $1_shl cmdhdr;
  procedure $1_shr cmdhdr;
  procedure $1_power cmdhdr;
  procedure $1_ptr_inc cmdhdr;
  procedure $1_ptr_dec cmdhdr
  define(~all_implement|, all_implement 
    ~
     procedure $1_push  cmdhdr; body( if State = FS_COMPILE then $1_compile_push(Machine, Command) else $1_interpret_push(Machine, Command) )
     procedure $1_interpret_push  cmdhdr; body( $2(WP^) := $2(StrToInt(NextName)); Inc(WP, SizeOf($2)); )
     procedure $1_compile_push  cmdhdr; body( BuiltinEWO('run@$1-push'); EW_$1(StrToInt(NextName)); )
     procedure $1_run_push  cmdhdr; body( $2(WP^) := ER_$1; Inc(WP, SizeOf($2)); )
     procedure $1_1_plus cmdhdr;  body( Inc($2(WVar(-SizeOf($2)))) )
     procedure $1_1_minus cmdhdr; body( Dec($2(WVar(-SizeOf($2)))) )
     procedure $1_div cmdhdr; body( $2(WVar(-2*SizeOf($2))) := $2(WVar(-2*SizeOf($2))) div $2(WVar(-SizeOf($2))); 
                                                   Dec(WP, SizeOf($2)); )
     procedure $1_mod cmdhdr; body( $2(WVar(-2*SizeOf($2))) := $2(WVar(-2*SizeOf($2))) mod $2(WVar(-SizeOf($2))); 
                                                   Dec(WP, SizeOf($2)); )
     procedure $1_divmod cmdhdr; body( $2(WVar(0)) := $2(WVar(-2*SizeOf($2))) mod $2(WVar(-SizeOf($2))); 
                                                     $2(WVar(-2*SizeOf($2))) := $2(WVar(-2*SizeOf($2))) div $2(WVar(-SizeOf($2)));
                                                     $2(WVar(-  SizeOf($2))) := $2(WVar(0)); 
                                               )
     procedure $1_shl cmdhdr; body( Dec(WP, SizeOf($2));
                    $2(WVar(-SizeOf($2))) := $2(WVar(-SizeOf($2))) shl $2(WVar(0)) )
     procedure $1_shr cmdhdr; body( Dec(WP, SizeOf($2));
                    $2(WVar(-SizeOf($2))) := $2(WVar(-SizeOf($2))) shr $2(WVar(0)) )
     procedure $1_power cmdhdr; 
     idle(var 
       Power, Base, Value: Cardinal;) 
     body(
       Power := WOI;
       Base := WOI;
       Value := 1;
       while Power > 0 do begin
         if (Power mod 2) > 0 then
           Value := Value * Base;
         Base := Base * Base;
         Power := Power div 2;
       end;
       WUI(Value);
     )
     procedure $1_ptr_inc cmdhdr;
     body(
       $2(Pointer(WVar(-SizeOf(Pointer)))^) := 
                         $2(Pointer(WVar(-SizeOf(Pointer)))^) + 1; 
       Dec(WP, SizeOf(Pointer));
     )
     procedure $1_ptr_dec cmdhdr;
     body(
       $2(Pointer(WVar(-SizeOf(Pointer)))^) := 
                         $2(Pointer(WVar(-SizeOf(Pointer)))^) - 1; 
       Dec(WP, SizeOf(Pointer));
     )
     procedure $1_from_str cmdhdr;
     var
       S: TStr;
     body(
       S := str_pop(Machine);
       ConvertStrTo$1(StrToString(S), $2(WVar(0)));
       Inc(WP, SizeOf($2));
       DelRef(S);
     )
    |
  )
  define(~regist_all_commands|, regist_all_commands
    ~
     Machine.AddCommand('$1-push', $1_push, True);
     Machine.AddCommand('run@$1-push', $1_run_push);
     Machine.AddCommand('genname($1, inc)', $1_1_plus);
     Machine.AddCommand('genname($1, dec)', $1_1_minus);
     ifelse($1, ~|, Machine.AddCommand('1+', $1_1_plus);)
     ifelse($1, ~|, Machine.AddCommand('1-', $1_1_minus);)
     Machine.AddCommand('genname($1, inc!)', $1_ptr_inc);
     Machine.AddCommand('genname($1, dec!)', $1_ptr_dec);
     ifelse($1, ~|, Machine.AddCommand('1+!', $1_ptr_inc);)
     ifelse($1, ~|, Machine.AddCommand('1-!', $1_ptr_dec);)
     Machine.AddCommand('genname($1, div)', $1_div);
     Machine.AddCommand('genname($1, mod)', $1_mod);
     Machine.AddCommand('genname($1, divmod)', $1_divmod);
     Machine.AddCommand('genname($1, shl)', $1_shl);
     Machine.AddCommand('genname($1, shr)', $1_shr);
     Machine.AddCommand('genname($1, **)', $1_power);
     Machine.AddCommand('str->$1', $1_from_str);
    |)
|)
{$IFNDEF FLAG_FPC}{$ENDREGION}{$ENDIF}

  number_arithmetic_commands(, TInt);
  number_arithmetic_commands(int, TInt);
  number_arithmetic_commands(int8, TInt8);
  number_arithmetic_commands(int16, TInt16);
  number_arithmetic_commands(int32, TInt32);
  number_arithmetic_commands(int64, TInt64);
  number_arithmetic_commands(uint, TUInt);
  number_arithmetic_commands(uint8, TUInt8);
  number_arithmetic_commands(uint16, TUInt16);
  number_arithmetic_commands(uint32, TUInt32);
  number_arithmetic_commands(uint64, TUInt64);

procedure LoadCommands(Machine: TForthMachine);

implementation

all_implement

procedure LoadCommands(Machine: TForthMachine);
begin
  regist_all_commands;
end;

end.
