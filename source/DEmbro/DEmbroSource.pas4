unit DEmbroSource;

define(`INCPOS', `Inc(PByte($1)ifelse($2,`',,`,$2'))')
define(`PTRLESS', `(TUInt($1) < TUInt($2))')

interface

uses
  {$I units.inc};

type
PSource = ^TSource;
TSource = object
 protected
  FEOS: Boolean;
  FBuffer: PArrayOfByte;
  FPos: PArrayOfByte;
  FFinish: PArrayOfByte;
 public
  procedure SkipSpaces;
  function SourceCut(const S: TString): TString;
  function NextName: TString; overload;
  function NextNamePassive: TString; overload;
  function NextName(var P: PAnsiChar): Integer; overload;
  function NextNamePassive(var P: PAnsiChar): Integer; overload;
  function NextChar: TChar;
  function NextLine: TString;
  function NextLinePassive: TString;

  property EOS: Boolean read FEOS;
end;

function GetEmptySource: PSource;
function CreateSourcePChar(P: PChar): PSource;

implementation

var
  EmptySource: PSource;

function IsSpace(B: Byte): Boolean; inline;
begin
  Result := Byte(B - 1) < 32;
end;

procedure TSource.SkipSpaces;
begin
  while IsSpace(FPos[0]) do
    INCPOS(FPos);
  FEOS := FPos[0] = 0;
end;

function TSource.SourceCut(const S: TString): TString;
var
  First: Byte;
  Cur: PArrayOfByte;
begin
  First := Byte(S[1]);
  Cur := FPos;
  while Cur[0] > 0 do begin
    while (Cur[0] > 0) and (Cur[0] <> First) do
      INCPOS(Cur);
    if MemCmp(Cur, @S[1], Length(S)) = 0 then
      Break
    else
      INCPOS(Cur);
  end;
  Result := MakeString(FPos, PtrInt(Cur) - PtrInt(FPos));
  FPos := @Cur[Length(S)];
  FEOS := FPos[0] = 0;
end;

function TSource.NextName: TString;
begin
  Result := NextNamePassive;
  FPos := @FPos[Length(Result)];
  FEOS := FPos[0] = 0;
end;

function TSource.NextNamePassive: TString;
var
  Cur: PArrayOfByte;
begin
  SkipSpaces;
  Cur := FPos;
  while Cur[0] >= 32 do
    INCPOS(Cur);
  Result := MakeString(FPos, PtrInt(Cur) - PtrInt(FPos));
  FEOS := FPos[0] = 0;
end;

function TSource.NextName(var P: PAnsiChar): Integer;
begin
  Result := NextNamePassive(P);
  INCPOS(FPos, Result);
end;

function TSource.NextNamePassive(var P: PAnsiChar): Integer;
var
  Cur: PArrayOfByte;
begin
  SkipSpaces;
  P := PAnsiChar(FPos);
  Cur := FPos;
  while Cur[0] > 32 do
    INCPOS(Cur);
  Result := PtrInt(Cur) - PtrInt(FPos);
end;

function TSource.NextChar: TChar;
begin
  if FEOS then
    Result := TChar(0)
  else begin
    Result := TChar(FPos[0]);
    INCPOS(FPos);
  end;
end;

function TSource.NextLine: TString;
begin
  Result := '';
end;

function TSource.NextLinePassive: TString;
begin
  Result := '';
end;

type
  PSourcePChar = ^TSourcePChar;
  TSourcePChar = object(TSource)
    constructor Create(P: PAnsiChar);
  end;

constructor TSourcePChar.Create(P: PAnsiChar);
begin
  FPos := PArrayOfByte(P);
end;

function GetEmptySource: PSource;
begin
  Result := EmptySource;
end;

function CreateSourcePChar(P: PChar): PSource;
begin
  Result := New(PSourcePChar, Create(P));
end;

initialization
  EmptySource := CreateSourcePChar('');
finalization
  Dispose(EmptySource);
end.
