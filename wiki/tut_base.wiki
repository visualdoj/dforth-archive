= Основы =
== Устройство целого числа ==
Обычное, десятичное представление числа не очень удобно с точки зрения 
программирования. Часто число будет подразумеваться как последовательность
битов, соответствующая двоичному представлению числа.
||Число||Двоичное представление||
||0||0||
||1||1||
||2||10||
||3||11||
||4||100||
||6||110||
||8||1000||
||16||10000||
||20=16+4||10100||
||26=16+8+2||11010||

В 32-битных системах стандартное число занимает 32 бита, 64-битных, соответственно,
64 бита. Поэтому полная запись всех битов числа займёт много места. Чтобы сократить её, применяют 16-ричную систему счисления:
||Число||Шестнадцатиричное представление||Число||Шестнадцатиричное представление||
||1||1||17||11||
||2||2||255=16*16-1||FF||
||3||3||256||100||
||4||4|| || ||
||5||5|| || ||
||6||6|| || ||
||7||7|| || ||
||8||8|| || ||
||9||9|| || ||
||10||A|| || ||
||11||B|| || ||
||12||C|| || ||
||13||D|| || ||
||14||E|| || ||
||15||F|| || ||
||16||10|| || ||

Часто бывает полезным иметь возможность производить операции с отрицательными
числами. Для этого какой-то определённый бит выделяется для хранения знака.
При этом, число 0 представляется числом, в котором все биты равны 0, а
прибавление и вычитание 1 и -1 можно производить обычным образом.
||Число||32-битное представление||
||  2               || 00000000000000000000000000000010 ||
||  1               || 00000000000000000000000000000001 ||
||  0               || 00000000000000000000000000000000 ||
|| -1               || 11111111111111111111111111111111 ||
|| -2               || 11111111111111111111111111111110 ||
|| -3               || 11111111111111111111111111111101 ||
|| -4               || 11111111111111111111111111111100 ||
|| -2<sup>31</sup>  || 10000000000000000000000000000000 ||

Таким образом, если самый левый бит равен 1, то число считается отрицательным.

Набор битов можно рассматривать как знаковое или беззнаковое число. При этом
с точки зрения битов сложение происходит одинаково в обоих случаях (однако,
умножение уже отличается).

Байт — последовательность из 8 битов.

== Оперативная память и стек ==

Оперативная память — занумерованная последовательность байтов. Чтобы обратиться
к определённому месту оперативной памяти, нужно знать номер байта, с которого
оно начинается. Число, которое обозначает номер байта в оперативной памяти,
называется указателем. 

Стек — последовательность байт, с которой можно производить две операции: добавить сколько-то байт в конец и прочитать сколько-то байт с конца.

Например, если в изначально пустой стек добавить число 2, потом число 101, а потом число 5, то стек будет примет вид
{{{
2 101 5
}}}
(вершину стека будем располагать справа).

Теперь можно извлечь элемент, т.е. получить 5. При этом стек уменьшится на один 
элемент.
{{{
2 101
}}}
Если извлечь ещё один элемент, то мы получим 101, а стек уменьшится ещё на один 
элемент
{{{
2
}}}

== Программирование на DEmbro ==

Программа на DEmbro при выполнении операций использует стек (на самом деле 
несколько, но это сейчас не важно), который называется W. Например, есть команда 
int-push, которая помещает в стек указанное число. Следующий код последовательно 
помещает числа 2, 101 и 5:
{{{
int-push 2
int-push 101
int-push 5
}}}
При этом число байт, которое будет занято на стеке числом, зависит от текущей
системы. Такие числа называются ячейками и говорят, что они занимают
одну ячейку памяти. (См. [terms Термин Ячейка].) 

Команда + берёт со стека два числа типа int, складывает их и кладёт на стек
результат. Таким образом, если теперь выполнить код
{{{
+
}}}
то стек примет вид (W указано чтобы обозначить какой именно стек имеется ввиду)
{{{
W: 2 106
}}}
Аналогично, команда *
{{{
*
}}}
перемножит два числа с вершины стека, и положит результат
{{{
W: 212
}}}
Команда
{{{
.
}}}
снимает с вершины стека число и выводит его на консоль. Таким образом, будет
напечатано число 212, а стек окажется в первоначальном состоянии.

Так как операция int-push используется очень часто, есть возможность её не 
указывать — просто число при выполнении будет положено на стек. Кроме того,
в DEmbro не требуется каждую операцию писать на отдельной строке. Единственное
условие: команды должны быть разделены хотя бы одним пробелом или переводом
строки. Всё проделанное выше можно переписать в следующем виде:
{{{
2 101 5 + * .
}}}

Команда // используется для написания однострочных комментариев
{{{
// этот код не будет выполнен
}}}
Команда ( для многострочных:
{{{
( это многострочный
     комментарий)
}}}
— она пропускает все последующие символы вплоть до ).

Отмечу, что пробел после // и ( обязателен: в противном случае 
DEmbro-интерпретатор не выделит их как отдельную команду и произойдёт ошибка.
