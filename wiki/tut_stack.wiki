= Работа со стеком =

Практически все команды оперируют со стеком данных. Например, если написать целое число, то при выполнении это число будет помещено на стек данных. Команда + снимает со стека два верхних числа, складывет их, и кладёт на стек результат. Команда . снимает со стека число и печатает его на экране. Таким образом, следующая программа выведет на экран 12:
{{{
5 7 + .
}}} 
Чтобы явно указать, что вы кладёте число на стек, можно использовать команду push:
{{{
push 5 push 7 + .
}}}
Для упрощения понимания того, что происходит со стеком при выполнении команд, хорошим тоном является написание комментариев в стековой нотации. А именно, указывается состояние стека до и после выполнения команды, разделённых двойным дефисом. Вот примеры стековых нотаций:
{{{
+ ( n1 n2 -- n3)
. ( n -- )
}}} 
Для арифметики с целыми числами есть так же двуместные операторы: 
{{{
-   ( a b -- c ) вычитание 
*   ( a b -- c ) умножение
div ( a b -- c ) целочисленное деление
mod ( a b -- c ) остаток от деления 
}}}
и несколько одноместных операторов
{{{
abs ( a -- b) модуль числа
neg ( a -- b) обращение знака числа
}}}
Для работы со стеком есть несколько дополнительных команд.

dup дублирует верхний элемент на стеке
{{{
4 dup ( 4 -- 4 4) + . 
// распечатает 8
}}}
drop удаляет верхний элемент
{{{
6 7 drop ( 6 7 -- 6) .
// распечатает 6
}}}
over копирует предпоследний элемент стека на вершину
{{{
6 7 over ( 6 7 -- 6 7 6) .
// распечатает 6
}}}
swap меняет два верхних элемента местами
{{{
6 7 swap ( 6 7 -- 7 6) drop ( 7 6 -- 7) .
// распечатает 7
}}}
lrot меняет по кругу три верхних элемента
{{{
1 2 3 lrot ( 1 2 3 -- 2 3 1)
}}}
rrot меняет по кругу три верхних элемента, но в другую сторону, в отличие от lrot
{{{
1 2 3 rrot ( 1 2 3 -- 3 1 2)
}}}

Кроме типа int в DEmbro есть и другие. Каждый из них имеет собственный набор стековых команд. Например, для корректного выполнения вышеперечисленных команд для типа int8 нужно добавлять к ним префикс int8: 
{{{
int8-push 5 int8-push 7 int8+ int8.
}}}
Стек является нетепизированным. Если вы кладёте в него число типа int8, то стек увеличивается на 1 байт. Если вы кладёте число типа int32, то стек увеличивается на 4 байта.
