= Словари =
Часто возникает необходимость хранить созданные слова в разных именных 
пространствах, чтобы избежать конфликтов — ситуаций, когда вызывается не та
команда, которую предполагал вызвать программист.

Эта функциональность обеспечивается механизмом словарей. Словарь в DEmbro — это 
просто список команд. Изначально есть два словаря — vGLOBAL и vLOCAL. Кроме того,
есть два стека словарей — target и context.

Когда в программе создаётся новая команда, то она добавляется в словарь, который
лежит на вершине стека target. Когда программа осуществляет поиск какого-то 
слова (при интерпретации или компиляции), то поиск осуществляется в словарях,
указанных в context. Начальные состояния этих стеков следующие:
{{{
target: vGLOBAL
context: vGLOBAL vLOCAL
}}}
Это означает, что каждое новое определение добавляется в словарь vGLOBAL, а 
когда нужно найти слово, то в начале просматривается vLOCAL, а потом vGLOBAL.

{{{
vLOCAL ( -v) кладёт словарь vLOCAL
vGLOBAL ( -v) кладёт словарь vGLOBAL
vocabulary-new ( -p) создаёт новый словарь, указатель на него кладёт на стек
target< ( v-) снимает словарь со стека и кладёт в стек target
target> ( -v) снимает словарь со стека target и кладёт в стек 
context< ( v-) снимает словарь со стека и кладёт в стек context
context> ( -v) снимает словарь со стека context и кладёт в стек 
voc.use ( v-) снимает словарь со стека и отправляет его в target и context
^^^ ( -) снимает верхние словари target и context
vocabulary ( "name"-) создаёт команду с именем name и словарь. При вызове name
                      словарь кладётся на стек
declare-namespace ( "name"-) создаёт команду с именем name и словарь. 
                     При вызове name словарь отправляется в target и context.
                     Команда name является immediate.
namespace ( "name"-) Выполняет declare-namespace и после этого команду name.
LOCAL () выполняет voc.use для словаря vLOCAL
GLOBAL () выполняет voc.use для словаря vGLOBAL
}}}

Разберём на примерах. Допустим, Вы хотите, чтобы команда «.» печатала не число,
а строку. Но при этом, хочется сохранить возможность использования обычной 
команды «.». Чтобы это осуществить, можно определить свою команду «.» 
в собственном пространстве имён:
{{{
namespace MY : . ( s) str. ; ^^^
}}}
Разберём подробней эту строку. «namespace MY» создаёт словарь, и делает его 
текущим как для записи, так и для чтения. Далее, создаётся новая команда «.»
в верхнем словаре стека target, т.е. в словаре MY. 
