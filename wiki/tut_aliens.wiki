= Взаимодействие с внешним кодом =
При помощи языка, который не умеет использовать внешние библиотеки (в частности,
встроенные библиотеки операционной системы), можно писать учебные программы, 
но не практические. Одна из важных разновидностей внешних библиотек — 
динамические библиотеки. Работать с ними достаточно просто.

Во-первых, нужно загрузить библиотеку командой lib-load. Она снимает со стека
строку с названием библиотеки, пытается её загрузить, и кладёт на стек 
два параметра — указатель на библиотеку и успешность загрузки. Если верхняя 
ячейка равна 0, то библиотеку загрузить не удалось (например, если она не была
найдена). Пример (windows): 
{{{
value lib // здесь будем хранить указатель на библиотеку
str" winmm.dll" lib-load . to lib
}}}
(Будет выведена на консоль успешность загрузки.)

Далее, из библиотеки следует получить указатели на необходимые функции. Делается
это командой lib-fun. Она снимает со стека библиотеку и название функции, и кладёт
указатель на функцию. Если получить указатель не удалось (например, такой 
функции нет), вместо указателя на стек будет положен 0. Продолжая предыдущий код,
можно написать следующее (windows):
{{{
value sndPlaySound
lib str" sndPlaySoundA" lib-fun to sndPlaySound
}}}

Как только необходимость в библиотеке отпадает, её можно освободить командой
lib-unload:
{{{
lib lib-unload
}}}

Замечу, что освобождению подлежат даже те библиотеки, которые вернули код ошибки
при вызове lib-load.

Гораздо более интересный вопрос — что делать с указателем на загруженную функцию,
т.е. как эту функцию вызвать. Чтобы это осуществить, необходимо воспользоваться
конструкцией «:a ... a;». Буква «a» в ней обозначает слово «alien», т.е. внешний.
Схематично использование этой конструкции можно выразить так:
{{{
:a "Имя_Функции" <Тип_1> <Тип_2> ... <Тип_n> <Тип_R> <Способ_Вызова> a;
}}}
`"Имя_Функции"` задаёт слово, при помощи которого внешняя функция будет 
вызываться из вашей программы.
`"Тип_i"` задаёт i-тый параметр функции — t_int, t_ptr. 
`<Тип_R>` задаёт тип возвращаемого функцией значения — t_int, t_ptr, t_void.
`<Способ_Вызова>` задаёт конвенцию вызова (в настоящий момент поддерживается 
только stdcall).
Как только будет выполнено слово `Имя_Функции`, параметры заданных типов будут
сняты со стека, переложены на системный стек в соответствии с указанным 
способом вызова, передано управление функции, указатель на который хранится
в команде `Имя_Функции`. По завершению выполнения функции, возвращённое ей 
значение в соответствии с указанным способом вызова будет переложено на стек
DEmbro.

Отмечу, что «:a» оставаляет машину в режиме интерпретации, поэтому типы и способ
вызова можно укладывать произвольным образом. Главное, чтобы к моменту вызова a;
всё было уложено на стеке правильно. Команда `:a` кладёт на рабочий стек служебную
информацию, поэтому после `:a` нельзя прочитать то, что на стеке хранилось раньше,
пока не вызвана команда «a;».

По умолчанию, команда `Имя_Функции` хранит в себе 0 и при попытке её исполнения
произойдёт ошибка. Чтобы выставить другое значение, можно воспользоваться 
оператором `to`. К примеру, код для получения указателя на функцию можно 
переписать следующим образом (windows):
{{{
:a sndPlaySound t_pchar t_uint t_uint32 stdcall a;
lib str" sndPlaySoundA" lib-fun to sndPlaySound
}}}
(Сравните с [http://msdn.microsoft.com/en-us/library/ms713269(v=vs.85).aspx msdn sndPlaySound].)

Теперь функция готова к вызову — будьте осторожны, оно может издать звук 
(windows)
{{{
pchar" tada.wav" 0 sndPlaySound .
}}}
(На консоль будет выведен результат, возвращённый функцией sndPlaySound.)

*Внимание!* В настоящий момент для alien-функций поддерживаются только типы 
размером ровно 4 байта, и конвенция вызова stdcall. Остальное в разработке.

== Написание заголовков ==
Часто для определённой библиотеки пишется заголовочный файл, в котором описаны
загружаемые функции, константы и т.д. Для упрощения этого в rtl предусмотрен 
модуль headers:
{{{
include" units\utils\headers.de"
}}}

Для начала следует объявить заголовок командой declare-header. Команда снимает
со стека конвенцию вызова, читает следующее за ним слово и создаёт новую 
команду с таким названием.
{{{
<convension> declare-header "name"
}}}

Описание прототипов функций будет отличаться только тем, что вместо конвенции
нужно положить на стек результат созданной команды `name`, а вместо 
`a;` вызвать `header;`
{{{
:a "name" <type1> ... <typen> <typeR> <header> header;
}}}
При этом всё будет так же, как и в случае простого «a;», но конвенция вызова
будет взята из `header`, а кроме того сгенерированная команда name запомнится
внутри `header`.

Как только ВСЕ прототипы функций описаны, их следует загрузить одним махом — 
вызовом команды `header-load`, принимающую лишь параметр — header, и 
возвращающую успешность загрузки (0, если загружена). Будет загружена библиотека
с именем, указанным в header (по умолчанию оно совпадает названием переменной).

Многие заголовки, входящие в rtl DEmbro, написаны именно таким способом. 
В качестве примера, можно изучить файлы [http://code.google.com/p/dforth/source/browse/trunk/release/units/headers/mmsystem.de units\headers\mmsystem.de] и [http://code.google.com/p/dforth/source/browse/trunk/release/examples/windows/mmsystem.de examples\windows\mmsystem.de].

Если библиотека содержит функции с несколькими конвенциями вызова, то при 
описании прототипа следует менять поле conv:
{{{
stdcall header header.conv !
// или
cdecl header header.conv !
}}}

Если библиотеку нужно загружать из файла, имя которого отлично от имени 
переменной с библиотекой, то следует изменить поле name:
{{{
str" winmm.dll" header header.name c!
}}}
(Главное — сделать это раньше, чем будет выполнена команда `header-load`.)
