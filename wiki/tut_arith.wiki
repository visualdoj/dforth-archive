= Числа =
{{{
%+       ( ab    -- a+b    )
%-       ( ab    -- a-b    )
%*       ( ab    -- a*b    )
%=       ( ab    -- a=b    ) проверяет два значения на равенство, кладёт на стек bool
%<>      ( ab    -- a<>b   ) ... на неравенство ...
%<       ( ab    -- a<b    ) ... на меньше ...
%>       ( ab    -- a>b    ) ... на больше ...
%<=      ( ab    -- a<=b   ) ... на меньше или равно ...
%>=      ( ab    -- a>=b   ) ... на больше или равно ...
%0=      ( a     -- a=0    ) проверяет a на равенство нулю
%0<>     ( a     -- a<>0   ) ... на неравенство ...
%0<      ( a     -- a<0    ) ... на меньше ...
%0>      ( a     -- a>0    ) ... на больше ...
%0<=     ( a     -- a<=0   ) ... на меньше или равно ...
%0>=     ( a     -- a>=0   ) ... на больше или равно ...
%-?dup   ( a     -- 0 | a a) дублирует a, если оно ненулевое
%-within ( x a b -- bool   ) проверяет лежит ли x в полуинтервале [a b) (в разработке)
%-max    ( ab    -- a | b  ) из двух верхних элементов на стеке оставляет максимальный
%-min    ( ab    -- a | b  ) из двух верхних элементов на стеке оставляет минимальный
%-minmax ( ab    -- ab | ba) сортирует два элемента — на вершине стека оказывается максимум, а вторым по счёту минимум 
}}}
== Целые числа ==
int, int8, int16, int32, int64,
uint, uint8, uint16, uint32, uint64
{{{
%-div    ( ab -- a div b          ) вычисляет целую чаcть при делении a на b
%-mod    ( ab -- a mod b          ) вычисляет остаток при делении a на b
%-divmod ( ab -- a div b, a mod b )
%-inc    ( a  -- a+1              ) быстрое увеличение на единицу
%-dec    ( a  -- a-1              ) быстрое уменьшение на единицу
1+       ( a  -- a+1              ) эквивалентно int-inc
1-       ( a  -- a-1              ) эквивалентно int-dec
}}}
== Числа с плавающей точкой ==
{{{
%/      ( ab -- a/b         ) делит одно число на другое
%-cos   ( a  -- cos(a)      )
%-sin   ( a  -- sin(a)      )
%-tan   ( a  -- tan(a)      ) 
%-atan  ( a  -- atan(a)     )
%-atan2 ( yx -- atan2(y, x) )
}}}
== Числа со знаком ==
int, int8, int16, int32, int64, single, double, extended
{{{
%-abs    ( % -- |%| ) вычисляет модуль числа
%-neg    ( % -- -%  ) обращает знак числа
}}}
== Преобразование чисел ==
Часто возникает необходимость перевести число из одного типа в другой.
{{{
int8->int int16->int int32->int
int->int8 int->int16 int->int32
uint8->uint uint16->uint uint32->uint
uint->uint8 uint->uint16 uint->uint32
single->double single->extended
double->single souble->extended
extended->single extended->double
}}}
== bool, flag и побитовые операции ==
{{{
not   ( i   -- i       ) меняет каждый бит в числе на противоположный
or    ( ii  -- i       ) применяет операцию or побитово
and   ( ii  -- i       ) применяет операцию and побитово
xor   ( ii  -- i       ) применяет операцию xor побитово
}}}
bool — это int, в побитовом представлении которого во всех битах находится либо 0,
либо 1
flag — это int, про который нам важно знать равен ли он нулю или нет. Например,
оператор if и циклы из следующего раздела. Любой bool можно рассматривать как flag,
но не наоборот 
{{{
false (     -- bool    ) кладёт на стек ложь (т.е. 0)
true  (     -- bool    ) кладёт на стек истину (int, у которого все биты равны 1)
}}}
Если на стеке лежат bool значения
