= Операторы ветвлений =
Операторы ветвлений нельзя использовать внутри определения функции. Почему это
так будет объяснено в одном из последующих разделов.
== if ==
Использование условного оператора выглядит так:
{{{
: ... <flag> if ... then ... ;
}}}
или так
{{{
: ... <flag> if ... else ... then ... ;
}}}
Обратите внимание на то, что слово then используется в качестве ограничителя 
оператора, а не условия, как во многих языках.

Команда `if` при вызове функции снимет со стека число, если оно равно `0`, то 
в первом варианте выполнение продолжится после слова `then`, а во втором — после 
слова `else`. Если же снятое со стека число не равно `0`, то выполнение продолжиться после слова `if`, обходя код в else-разделе, если он есть
== do ==
{{{
begin ... <flag> until
}}}
begin в режиме исполнения ничего не делает, until снимает flag со стека и если он равен false, то исполнение возвращается к begin
{{{
begin ... <flag> while ... repeat
}}}
begin в режиме исполнения ничего не делает, while снимает flag со стека, и если он равен false, то переходит к коду после repeat. repeat переходит к begin
== loop ==
== case ==
