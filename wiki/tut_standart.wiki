= Функции =
Фунции определяются при помощи следующей конструкции:
{{{
: <name> <...> ;
}}}
Где name — имя определяемой функции, а ... — последовательность команд, которую
должна выполнять функция. Имена функций могут содержать любые символы, за
исключением пробелов и переводов строк.

Например, код из предыдущего примера можно оформить в виде функции
{{{
: test1 2 101 5 + * . ;
}}}

Теперь определена новая команда test1, которая при выполнении будет выводить
на экран 212.

Как передавать в функцию параметры? При помощи стека W. Например, определим
команду
{{{
: test2 + * . ;
}}}

Тогда код
{{{
2 101 5 test2
}}}
будет делать то же, что и вызов test1.

Как вернуть из функции значение? При помощи того же стека W. Команда
{{{
: test3 + * ;
}}}
не печатает ничего на экран, но после выполнения оставит на стеке то, 
что напечатала бы test2.

Команды можно перекрывать. Команда создаётся только после выполнения завершающей
точки с запятой. Это означает, что внутри команды нельзя напрямую вызвать ею саму.

Такой код
{{{
: test 2 . ;
: test 1 . test 3 . ;
test
}}}
выведет на экран последовательность «1 2 3».

Для того, чтобы использовать рекурсию, есть специальное слово recurse, которое
вызывает определяемую команду
{{{
: print-range-from-n-to-1 dup . dup if 1- recurse then ;
20 print-range-from-n-to-1 // распечатает последовательность от 20 до 0
}}}
(Конструкция if будет изучена в следующих разделах.)

= Переменные, константы, значения =

Для объявления переменной следует использовать команду variable.
{{{
variable <name>
}}}

Например,
{{{
variable x
}}}

После выполнения этого кода будет выделена память под хранения ячейки и появится 
новая команда x, которая при выполнении будет класть на стек указатель на 
выделенную ячейку. Есть две важные команды для работы с указателями
{{{
@ (     ptr -- int) снимает со стека указатель, считывает ячейку из оперативной 
                    памяти, на которое он указывает, и кладёт это число на стек
! ( int ptr --    ) считывает со стека ячейку и указатель, и записывает эту ячейку
                    в оперативную память по заданному указателю
}}}
Таким образом, чтобы записать в переменную 101, нужно выполнить код
{{{
101 x !
}}}
а чтобы вывести на экран значение переменной x:
{{{
x @ .
}}}

Если значение переменной менять не нужно, то можно объявить константу командой 
constant:
{{{
constant <name> ( int -- )
}}}

Например,
{{{
5 constant c
}}}

Как и в прошлый раз, будет выделена память под `c`, в неё будет помещено
значение 5. Но, при выполнении команды `c` будет положен не адрес, а сразу 
значение. Т.е. чтобы напечатать значение константы на экран, достаточно 
выполнить
{{{
c .
}}}

Вместо определения переменных при помощи команды `variable` можно воспользоваться
командой value:
{{{
value <name> ( int -- )
}}}
Она выделяет память под хранение числа, записывает в неё начальное значение,
берущееся со стека. Пример
{{{
91 value v
}}}

При выполнении команды, созданной при помощи `value`, на стек будет помещено, 
как и в случае с `constant`, значение, а не указатель. Отличие от константы
заключается в том, что к созданному слову можно применять команду to:
{{{
to <name> ( int -- )
}}}
где name должно быть командой созданной ранее при помощи value.
{{{
v . // печатает 91
2 to v // меняем значение v на 2
}}}

В каком-то смысле, value больше похоже на переменную из обычных языков, а команда
to на оператор присваивания.

Таким образом, код
{{{
v x @ c test2
}}}
выведет на экран 212.

Отмечу, что variable, constant и value нельзя использовать внутри функции. 
(Точнее, можно, но это приведёт к немного другим последствиям. См. раздел
выразимость.)
