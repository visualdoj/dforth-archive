== Семантика ==

*Семантика* — описание (возможно, частичное) изменений, которые совершает команда (код) при своём выполнении. Оно включает описание начальных условий, при которых действие команды (кода) не определено. Описания изменений можно разбить на несколько категорий:
  # *W-семантика* — что станет со стеком W после выполнения данной команды (кода) *ex* «команда + снимает со стека два числа и кладёт в стек их сумму» — W-семантика *ex* «команда + снимает со стека два числа и кладёт одно» 
  # *R-семантика* — то же для стека R *ex* «команда >r кладёт в стек R число»
  # *L-семантика* — то же для стека L
  # *С-семантика* — то же для таблицы команд *ex* «команда create создаёт в таблице новую команду»
  # *E-семантика* — то же для области данных и кода (embro) *ex* «команда allot увеличивает значение here»  
  # *S-семантика* — то же для обрабатываемого исходного кода *ex* «команда create читает имя из входного потока»
  # *Внешние эффекты* — действия, которые будут совершены за пределами DEmbro-машины. К ним относятся вызовы внешних функции, запись (чтение) в (из) файл(а) *ex* «команда file-write записывает в файл определённый набор данных, если на вершине стека лежит открытый файл»

*Начальное условие команды (кода)* — все возможные начальный условия, при которых 
действие команды (кода) определено. *ex1* действие команды `literal` определено только
в режиме компиляции, а команды `(literal)` — в режиме исполнения.

При разных начальных условиях могут выполняться совершенно разные выполняемые действия. 
Если у семантик `s` и `p` взаимоисключающие начальные условия `s0` и `p0`, то `s+p` (прямая сумма семантик) — семантика, которая соответствует `s` при начальном условии `s0`, соответствует `p` при начальном условии `p0`, и не определена иначе. *ex* у команд
`literal` и `(literal)` можно реализовать прямую сумму:
{{{
: literal' state @ if ['] literal execute else (literal) then ; immediate
}}}

*Исчерпывающая семантика* — семантика, полностью описывающая действия команды.

*W-инвариантная* команда (код) — команда (код), которая(ый) не меняет состояние стека W. По аналогии можно ввести определения для инвариантности команд (кода) относительно других структур DEmbro-машины.

*Внутренняя* команда — команда, которая не имеет внешних эффектов.

*Композиция* двух семантик `s` и `p` (обозначаемая `s@p`) — семантика кода, соответсвующая последовательному выполнению сначала команды (кода) с семантикой `s`, потом команды (кода) с семантикой `p`. Если семантики `s`, `p`, `q` исчерпывающи, то `s@(p@q)=(s@p)@q`.

== Оптимизации ==

*Подстановка* — замена вызова команды, на код, который эта команда в себе содержит (если таковой у неё есть). Подстановку можно осуществить для R-инвариантных команд.

== x86 ==
|| код || x86 asm || комментарий ||
|| получение 0 (true) || `xor EAX, EAX` || ||
|| получение -1 (false) || `xor EAX, EAX \ dec EAX` || ||
|| 4 5 * + || `(Wpop EAX) \ (Wpop EBX) \ mul EAX, EBX \ (Wpop ECX) add EAX, ECX` || Не выполнять лишние операции со стеком, если результаты буду использованы сразу же ||