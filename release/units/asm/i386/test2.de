// 2011.08.04 # Doj
// Продолжаю эксперименты с ассемблером

include" units\asm\asm.de"
include" units\asm\i386\all.de"

uses I386 TRANSLATOR

variable *in1
variable *in2
variable *in3
variable *in4
100 *in1 !
505 *in2 !
h55 *in3 !
h33 *in4 !
variable *out1
variable *out2
variable *out3
variable *out4
variable *out5
variable *out6
variable *out7
:asm-noname
  PREFIX
    mov eax d[ *in3 disp ]
    and eax d[ *in4 disp ]
    mov d[ *out1 disp ] eax

    mov eax d[ *in3 disp ]
    xor eax d[ *in4 disp ]
    // xor eax h00 imm
    mov d[ *out2 disp ] eax

    mov d[ *out3 disp ] h33 imm
    mov eax d[ *in3 disp ]
    xor d[ *out3 disp ] eax

    mov eax d[ *in1 disp ]    
    mul d[ *in2 disp ]
    mov d[ *out4 disp ] eax

    *auto-integers? on
    mov eax 0
    mov edx 0
    *auto-integers? off

    mov eax d[ *in1 disp ]    
    mov ecx d[ *in2 disp ]    
    imul ecx eax
    mov d[ *out5 disp ] ecx
    // mov ecx d[ *in1 disp ]
    // imul ecx d[ *in2 disp ]
    // mov d[ *out5 disp ] ecx

    mov eax d[ *in1 disp ]
    mov ecx d[ *in2 disp ]
    lea eax d[ ecx 2* eax 256 disp ] 
    mov d[ *out6 disp ] eax

    mov eax d[ *in1 disp ]    
    mov ecx d[ *in2 disp ]    
    imul ecx
    mov d[ *out7 disp ] eax

    ret
  \PREFIX
asm-noname; execute
." *out1 = " *out1 @ . cr
." *out2 = " *out2 @ . cr
." *out3 = " *out3 @ . cr
." *out4 = " *out4 @ . cr
." *out5 = " *out5 @ . cr
." *out6 = " *out6 @ . cr
." *out7 = " *out7 @ . cr

variable *out
:asm-noname PREFIX
    mov edx 456 imm
    mov ebx 123 imm
    // sub edx ebx
    sub edx 123 imm
    mov d[ *out disp ] edx
    ret 
\PREFIX asm-noname; execute
*out @ . cr

:asm-noname PREFIX
    mov eax 456 imm
    sub eax 123 imm
    mov d[ *out disp ] eax
    ret 
\PREFIX asm-noname; execute
*out @ . cr

:asm-noname PREFIX
    mov d[ *out disp ] 456 imm
    sub d[ *out disp ] 123 imm
    ret 
\PREFIX asm-noname; execute
*out @ . cr

:asm-noname PREFIX
    push 333 imm
    mov eax 456 imm
    push eax
    pop ecx
    pop d[ *out disp ]
    ret 
\PREFIX asm-noname; execute
*out @ . cr

:asm-noname PREFIX
    mov eax 333 imm
    mov edx 456 imm
    mov d[ *out disp ] 117 imm
    xchg eax edx
    xchg d[ *out disp ] edx
    ret 
\PREFIX asm-noname; execute
." xchg: " *out @ . cr

:asm-noname PREFIX
    mov d[ *out disp ] -333 imm
    neg d[ *out disp ]
    ret 
\PREFIX asm-noname; execute
." neg: " *out @ . cr

:asm-noname PREFIX
    mov d[ *out disp ] -334 imm
    not d[ *out disp ]
    and d[ *out disp ] hFFF imm
    ret
\PREFIX asm-noname; execute
." not: " *out @ . cr

:asm-noname PREFIX
    mov edx 123 imm
    mov eax 333 imm
    mov ebx 333 imm
    sub eax ebx
    cmovz edx ebx
    mov d[ *out disp ] edx
    ret
\PREFIX asm-noname; execute
." cmovz: " *out @ . cr

:asm-noname PREFIX
  *auto-integers? on
    mov eax 555
    mov ebx 111
  @> LOOP
    sub eax 2
    sub ebx 1
    jnz @@ LOOP
    mov d[ *out disp ] eax
    ret
  all-resolve
\PREFIX asm-noname; execute
." jz: " *out @ . cr

" h55 . cr " bdup str. evaluate 
" h33 . cr " bdup str. evaluate 
GLOBAL " h55 h33 xor . " bdup str. evaluate ^
cr

\uses
