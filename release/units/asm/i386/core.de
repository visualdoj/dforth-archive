// 2011.07.31 # Doj
// ќсновные объ€влени€

namespace I386
  // текуща€ позици€ в ассемблерном коде (дл€ вычислени€ адресов меток)
  : pos@ ( -p) ;
  // записать в ассемблерный код байт
  : byte<< uint->uint8 uint8, ;
  : word<< uint->uint16 uint16, ;
  : dword<< uint->uint32 uint32, ;
  // перехват сообщений об ошибках
  : error ( B: s) ." Error: " str. cr ;
  : unknown-operand-type " unknown operand type" error ;
  : underconstruction " underconstruction" error ;

  variable *use-mode
  : use16 16 *use-mode ! ;
  : use32 32 *use-mode ! ;
  // на входе -- 16 или 32
  : switch<< ( i) *use-mode @ <> if h66 byte<< then ;
  // по умолчанию -- 32
  use32

// {{{ operands
  0 enum OPERAND_TYPE
  OPERAND_TYPE OT_IMM // константа
  OPERAND_TYPE OT_REG // регистр
  OPERAND_TYPE OT_SEG // сегментный регистр
  OPERAND_TYPE OT_MEM // пам€ть

  0 enum DATA_TYPE
  DATA_TYPE DT_BYTE
  DATA_TYPE DT_WORD
  DATA_TYPE DT_DWORD
  DATA_TYPE DT_QWORD

  0 enum REG_TYPE
  REG_TYPE RT_32
  REG_TYPE RT_16
  REG_TYPE RT_8

  0
    t_int -- .type
    // value = immediate value for .type = OT_IMM
    // value = register for .type = OT_REG
    // value = segment register for .type = OT_REG
    // value = data type (see DT_*)
    t_int -- .value
    // for .type = OT_REG
    t_int -- .regtype // see RT_*
    // for .type = OT_MEM; [base + factor*index + disp]
    t_int -- .base?
    t_int -- .disp?
    t_int -- .base
    t_int -- .factor // 
    t_int -- .index
    t_int -- .disp
  struct s_operand

  variable *operands#
  : operands# *operands# @ ;
  : clear-operands 0 *operands# ! ;
  // проверка на число операндов, *operands-read хранит число операндов, 
  // съедаемых командой
  variable *operands-read
  : ?operands ( i) dup *operands-read ! dup operands# >
                   if int->str "  operands need, but " str+ 
                      operands# int->str str+ 
                      "  found" str+ error 
                   else drop then ;

  create *operands 4 s_operand * allot
  : last-operand *operands operands# 1- s_operand * + ;
  : first last-operand ;
  : second *operands operands# 2 - s_operand * + ;
  : third *operands operands# 3 - s_operand * + ;

  : operand+ ( type:int) *operands# 1+! last-operand .type ! ;

  : factor? ( o) .factor @ 0<> ;
  : disp? ( o) .disp @ 0<> ;
  : base? ( o) .base @ -1 = ;
// }}}
// {{{ registers
  : enum8 0 begin dup 8 < while dup constant 1+ repeat drop ;
  enum8 EAX ECX EDX EBX ESP EBP ESI EDI
  enum8 AX CX DX BX SP BP SI DI
  enum8 AL CL DL BL AH CH DH BH
  enum8 MM0 MM1 MM2 MM3 MM4 MM5 MM6 MM7
  enum8 XMM0 XMM1 XMM2 XMM3 XMM4 XMM5 XMM6 XMM7
  0 constant ES
  1 constant CS
  2 constant SS
  3 constant DS
  4 constant FS
  5 constant GS
  EBP constant special-register
  ESP constant trouble-register
// }}}
\namespace
