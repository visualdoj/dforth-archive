// 2011.07.31 # Doj
// Команды множества IA-32

// {{{ Data Transfer Instructions
// TODO BSWAP
// TODO XADD CMPXCHG CMPXCHG8B
// TODO CWD/CDQ CBW/CWDE MOVSX MOVZX
multi-op MOV
  hA0  8 variant _al_moffset  ' first.disp imm!
  hA1 16 variant _ax_moffset  ' first.disp imm!
  hA1 32 variant _eax_moffset ' first.disp imm!
  hA2  8 variant _moffset_al  ' second.disp imm!
  hA3 16 variant _moffset_ax  ' second.disp imm!
  hA3 32 variant _moffset_eax ' second.disp imm!
  hB0  8 variant_reg_imm
  hB8 16 variant_reg_imm
  hB8 32 variant_reg_imm
  h8C 16 variant _reg_seg // underconstruction
  h8E 16 variant _seg_reg // underconstruction
  h8C 16 variant _mem_seg // underconstruction
  h8E 16 variant _seg_mem // underconstruction
  hC6  8 variant_mem_imm
  hC7 16 variant_mem_imm
  hC7 32 variant_mem_imm
  h88  8 variant_mem_reg
  h89 16 variant_mem_reg
  h89 32 variant_mem_reg
  h8A  8 variant_reg_reg
  h8B 16 variant_reg_reg
  h8B 32 variant_reg_reg
  h8A  8 variant_reg_mem
  h8B 16 variant_reg_mem
  h8B 32 variant_reg_mem

multi-op POP
    h8F 16 variant_mem /0
    h8F 32 variant_mem /0
    h58 16 variant _reg ' first.value +r
    h58 32 variant _reg ' first.value +r
    h1F  0 variant _ds
    h07  0 variant _es
    h17  0 variant _ss
    h0F hA1 16 variant _fs 1 prefixes
    h0F hA1 32 variant _fs 1 prefixes
    h0F hA9 16 variant _gs 1 prefixes
    h0F hA9 32 variant _gs 1 prefixes

multi-op PUSH
    hFF 16 variant_mem /6
    hFF 32 variant_mem /6
    h50 16 variant _reg ' first.value +r
    h50 32 variant _reg ' first.value +r
    h6A  8 variant_imm
    h68 16 variant_imm
    h68 32 variant_imm
    h0E  0 variant _cs
    h16  0 variant _ss
    h1E  0 variant _ds
    h06  0 variant _es
    h0F hA0 0 variant _fs 1 prefixes
    h0F hA8 0 variant _gs 1 prefixes

multi-op XCHG
    h90 16 variant _ax_reg ' first.value +r
    h90 32 variant _eax_reg ' first.value +r
    h90 16 variant _reg_ax ' second.value +r
    h90 32 variant _reg_eax ' second.value +r
    h86  8 variant_mem_reg
    h87 16 variant_mem_reg
    h87 32 variant_mem_reg
    h86  8 variant_reg_mem
    h87 16 variant_reg_mem
    h87 32 variant_reg_mem
    h86  8 variant_reg_reg
    h87 16 variant_reg_reg
    h87 32 variant_reg_reg

single-instructions
    // TODO : нужно ли тут переключение режимов 16/32 ?
    h60  0 variant PUSHA
    h60  0 variant PUSHAD
    h61  0 variant POPA
    h61  0 variant POPAD

: declare-CMOVcc ( base-opcode)
    multi-op h0F swap
    2dup 16 variant_reg_mem 1 prefixes
    2dup 32 variant_reg_mem 1 prefixes
    2dup 16 variant_reg_reg 1 prefixes
    2dup 32 variant_reg_reg 1 prefixes
    2drop ;
h47 declare-CMOVcc CMOVA
h43 declare-CMOVcc CMOVAE
h42 declare-CMOVcc CMOVAB
h46 declare-CMOVcc CMOVABE
h42 declare-CMOVcc CMOVC
h44 declare-CMOVcc CMOVE
h4F declare-CMOVcc CMOVG
h4D declare-CMOVcc CMOVGE
h4C declare-CMOVcc CMOVL
h4E declare-CMOVcc CMOVLE
h46 declare-CMOVcc CMOVNA
h42 declare-CMOVcc CMOVNAE
h43 declare-CMOVcc CMOVNB
h47 declare-CMOVcc CMOVNBE
h43 declare-CMOVcc CMOVNC
h45 declare-CMOVcc CMOVNE
h4E declare-CMOVcc CMOVNG
h4C declare-CMOVcc CMOVNGE
h4D declare-CMOVcc CMOVNL
h4F declare-CMOVcc CMOVNLE
h41 declare-CMOVcc CMOVNO
h4B declare-CMOVcc CMOVNP
h49 declare-CMOVcc CMOVNS
h45 declare-CMOVcc CMOVNZ
h40 declare-CMOVcc CMOVO
h4A declare-CMOVcc CMOVP
h4A declare-CMOVcc CMOVPE
h4B declare-CMOVcc CMOVPO
h48 declare-CMOVcc CMOVS
h44 declare-CMOVcc CMOVZ
// }}}
// {{{ Binary Arithmetic Instructions
// TODO IDIV DIV
: binary-instruction ( base-opcode base-exopcode "name")
    multi-op
    over 4 +  8 variant_al_imm
    over 5 + 16 variant_ax_imm
    over 5 + 32 variant_eax_imm
    h80   8 variant_mem_imm dup /r
    h81  16 variant_mem_imm dup /r
    h81  32 variant_mem_imm dup /r
    h80   8 variant_r/m_imm dup /r
    h81  16 variant_r/m_imm dup /r
    h81  32 variant_r/m_imm dup /r
    // signed-extended?
    h83  16 variant_mem_imm8 dup /r
    h83  16 variant_reg_imm8 dup /r
    h83  32 variant_mem_imm8 dup /r
    h83  32 variant_reg_imm8 dup /r
    over      8 variant_mem_reg
    over 1 + 16 variant_mem_reg
    over 1 + 32 variant_mem_reg
    over 2 +  8 variant_reg_mem
    over 3 + 16 variant_reg_mem
    over 3 + 32 variant_reg_mem
    over 2 +  8 variant_reg_reg
    over 3 + 16 variant_reg_reg
    over 3 + 32 variant_reg_reg
    drop drop ;

h00 '0 binary-instruction ADD
h08 '1 binary-instruction OR
h10 '2 binary-instruction ADC
h18 '3 binary-instruction SBB
h20 '4 binary-instruction AND
h28 '5 binary-instruction SUB
h30 '6 binary-instruction XOR
h38 '7 binary-instruction CMP

multi-op MUL
  hF6  8 variant_reg /4
  hF6  8 variant_mem /4
  hF7 16 variant_reg /4
  hF7 16 variant_mem /4
  hF7 32 variant_reg /4
  hF7 32 variant_mem /4

multi-op IMUL
  // 1 operand
  hF6  8 variant_reg /5
  last alias IMUL8_mem
  hF7 16 variant_reg /5
  last alias IMUL16_mem
  hF7 32 variant_reg /5
  last alias IMUL32_mem
  // 2 operands
  h0F hAF 16 variant_reg_reg 1 prefixes
  last alias IMUL16_reg_mem
  h0F hAF 32 variant_reg_reg 1 prefixes
  last alias IMUL32_reg_mem
  // 3 operands
  h6B 16 variant _reg_reg_imm8 ' third.value /r 
                               ' second mem!
                               ' first.value imm! 1 imm#!
  last alias IMUL16_reg_mem_imm8
  h6B 32 variant _reg_reg_imm8 ' third.value /r 
                               ' second mem!
                               ' first.value imm! 1 imm#!
  last alias IMUL32_reg_mem_imm8
  h69 16 variant _reg_reg_imm  ' third.value /r 
                               ' second mem!
                               ' first.value imm!
  last alias IMUL16_reg_mem_imm
  h69 32 variant _reg_reg_imm  ' third.value /r 
                               ' second mem!
                               ' first.value imm!
  last alias IMUL32_reg_mem_imm

multi-op INC
  hFE  8 variant_mem /0
  hFF 16 variant_mem /0
  hFF 32 variant_mem /0
  h40 16 variant _reg ' first.value +r
  h40 32 variant _reg ' first.value +r

multi-op DEC
  hFE  8 variant_mem /1
  hFF 16 variant_mem /1
  hFF 32 variant_mem /1
  h48 16 variant _reg ' first.value +r
  h48 32 variant _reg ' first.value +r

multi-op NOT
  hF6  8 variant_mem /2
  hF7 16 variant_mem /2
  hF7 32 variant_mem /2
  hF6  8 variant_reg /2
  hF7 16 variant_reg /2
  hF7 32 variant_reg /2

multi-op NEG
  hF6  8 variant_mem /3
  hF7 16 variant_mem /3 
  hF7 32 variant_mem /3 
  hF6  8 variant_reg /3
  hF7 16 variant_reg /3 
  hF7 32 variant_reg /3 
// }}}
// {{{ Decimal Arithmetic Instructions
// TODO DAA DAS AAM AAD
h37 0 op AAA
h3F 0 op AAS
// }}}
// {{{ Shift and Rotate Instructions
// TODO SAR SHR SAL/SHL SHRD SHLD ROR ROL RCR RCL
// }}}
// {{{ Bit and Byte Instructions
// TODO BT BTS BTR BTC BSF BSR SETE/SETZ SETNE/SETNZ SETA/SETNBE
// TODO SETAE/SETNB/SETNC SETB/SETNAE/SETC SETBE/SETNA SETG/SETNLE
// TODO SETGE/SETNL SETL/SETNGE SETLE/SETNG SETS SETNS SETO
// TODO SETNO SETPE/SETP SETPO/SETNP TEST
// }}}
// {{{ Control Transfer Instructions
// TODO JMP JE/JZ JNE/JNZ JA/JNBE JAE/JNB JB/JNAE JBE/JNA JG/JNLE JGE/JNL
// TODO JL/JNGE JLE/JNG JC JNC JO JNO JS JNS JPO/JNP JPE/JP JCXZ/JECXZ
// TODO LOOP LOOPZ/LOOPE LOOPNZ/LOOPNE CALL RET IRET INT INTO BOUND
// TODO ENTER LEAVE
: J ( short-opcode near-opcode)
    " J" source-next-name str+ multi-oped
    h0F swap 2dup 16 variant_near 1 prefixes
    32 variant_far 1 prefixes
    8 variant_short ;
h77 h87 J A
h73 h83 J AE
h72 h82 J B
h76 h86 J BE
h72 h82 J C
hE3 h00 J CXZ
hE3 h00 J ECXZ
// hE3 h00 J RCXZ
h74 h84 J E
h7F h8F J G
h7D h8D J GE
h7C h8C J L
h7E h8E J LE
h76 h86 J NA
h72 h82 J NAE
h73 h83 J NB
h77 h87 J NBE
h73 h83 J NC
h75 h82 J NE
h7E h8E J NG
h7C h8C J NGE
h7D h8D J NL
h7F h8F J NLE
h71 h81 J NO
h7B h88 J NP
h79 h89 J NS
h75 h85 J NZ
h70 h80 J O
h7A h8A J P
h7A h8A J PE
h7B h8B J PO
h78 h88 J S
h74 h84 J Z
// }}}
// {{{ String Instructions
// TODO MOVS/MOVSB MOVS/MOVSW MOVS/MOVSD CMPS/CMPSB CMPS/CMPSW CMPS/CMPSD
// TODO SCAS/SCASB SCAS/SCASW SCAS/SCASD LODS/LODSB LODS/LODSW LODS/LODSD
// TODO STOS/STOSB STOS/STOSW STOS/STOSD REP REPE/REPZ REPNE/REPNZ
// }}}
// {{{ I/O Instructions
// TODO IN OUT INS/INSB INS/INSW INS/INSD OUTS/OUTSB OUTS/OUTSW OUTS/OUTSD
// }}}
// {{{ Flag Control (EFLAG) Instructions
// TODO STC CLC CMC CLD STD LAHF SAHF PUSHF/PUSHFD POPF/POPFD STI CLI
// }}}
// {{{ Segment Register Instructions
// TODO LDS LES LFS LGS LSS
// }}}
// {{{ Miscellaneous Instructions
// TODO XLAT/XLATB MOVBE
multi-op LEA
  h8D 16 variant _reg_mem16 ' second.value /r ' first mem!
  last alias LEA16_reg_mem32
  h8D 32 variant _reg_mem16 ' second.value /r ' first mem!
  last alias LEA32_reg_mem32

multi-op NOP
  h90 0 variant _
  h0F h1F 16 2variant _reg /0 ' first mem!
  last alias NOP16_mem
  h0F h1F 32 2variant _reg /0 ' first mem!
  last alias NOP32_mem

hF4 0 op HLT
h0F h0B 0 op UD2 1 prefixes
h0F hA2 0 op CPUID 1 prefixes
// }}}
