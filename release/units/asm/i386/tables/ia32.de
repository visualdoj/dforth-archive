// 2011.07.31 # Doj
// Команды множества IA-32

// {{{ Data Transfer Instructions
// TODO CMOVE/CMOVZ CMOVNE/CMOVNZ CMOVA/CMOVNBE CMOVAE/CMOVNB
// TODO CMOVB/CMOVNAE CMOVBE/CMOVNA CMOVG/CMOVNLE CMOVGE/CMOVNL
// TODO CMOVL/CMOVNGE CMOVLE/CMOVNG CMOVC CMOVNC CMOVO CMOVNO
// TODO CMOVS CMOVNS CMOVP/CMOVPE CMOVNP/CMOVPO XCHG BSWAP
// TODO XADD CMPXCHG CMPXCHG8B PUSH POP PUSHA/PUSHAD POPA/POPAD
// TODO CWD/CDQ CBW/CWDE MOVSX MOVZX
multi-op MOV
  hA0  8 variant _al_moffset  ' first.disp imm!
  hA1 16 variant _ax_moffset  ' first.disp imm!
  hA1 32 variant _eax_moffset ' first.disp imm!
  hA2  8 variant _moffset_al  ' second.disp imm!
  hA3 16 variant _moffset_ax  ' second.disp imm!
  hA3 32 variant _moffset_eax ' second.disp imm!
  hB0  8 variant_reg_imm
  hB8 16 variant_reg_imm
  hB8 32 variant_reg_imm
  h8C 16 variant _reg_seg // underconstruction
  h8E 16 variant _seg_reg // underconstruction
  h8C 16 variant _mem_seg // underconstruction
  h8E 16 variant _seg_mem // underconstruction
  hC6  8 variant_mem_imm
  hC7 16 variant_mem_imm
  hC7 32 variant_mem_imm
  h88  8 variant_mem_reg
  h89 16 variant_mem_reg
  h89 32 variant_mem_reg
  h8A  8 variant_reg_reg
  h8B 16 variant_reg_reg
  h8B 32 variant_reg_reg
  h8A  8 variant_reg_mem
  h8B 16 variant_reg_mem
  h8B 32 variant_reg_mem
// }}}
// {{{ Binary Arithmetic Instructions
// TODO IDIV DIV INC DEC NEG
: binary-instruction ( base-opcode base-exopcode B: name)
    multi-op
    // over 4 +  8 variant_al_imm
    // over 5 + 16 variant_ax_imm
    // over 5 + 32 variant_eax_imm
    h80   8 variant_mem_imm dup /r
    h81  16 variant_mem_imm dup /r
    h81  32 variant_mem_imm dup /r
    h80   8 variant_reg_imm dup /r
    h80  16 variant_reg_imm dup /r
    h80  32 variant_reg_imm dup /r
    // signed-extended?
    h83  16 variant_mem_imm8 dup /r
    h83  16 variant_reg_imm8 dup /r
    h83  32 variant_mem_imm8 dup /r
    h83  32 variant_reg_imm8 dup /r
    over      8 variant_mem_reg
    over 1 + 16 variant_mem_reg
    over 1 + 32 variant_mem_reg
    over 2 +  8 variant_reg_mem
    over 3 + 16 variant_reg_mem
    over 3 + 32 variant_reg_mem
    over 2 +  8 variant_reg_reg
    over 3 + 16 variant_reg_reg
    over 3 + 32 variant_reg_reg
    drop drop ;

h00 '0 binary-instruction ADD
h08 '1 binary-instruction OR
h10 '2 binary-instruction ADC
h18 '3 binary-instruction SBB
h20 '4 binary-instruction AND
h28 '5 binary-instruction SUB
h30 '6 binary-instruction XOR
h38 '7 binary-instruction CMP

( multi-op ADD
  h04  8 variant _al_imm  ' first.value imm!
  h05 16 variant _ax_imm  ' first.value imm!
  h05 32 variant _eax_imm ' first.value imm!
  h80  8 variant_mem_imm /0
  h81 16 variant_mem_imm /0
  h81 32 variant_mem_imm /0
  h80  8 variant_reg_imm /0
  h81 16 variant_reg_imm /0
  h81 32 variant_reg_imm /0
  // signed-extended?
  h83 16 variant_mem_imm8 /0
  h83 16 variant_reg_imm8 /0
  h83 32 variant_mem_imm8 /0
  h83 32 variant_reg_imm8 /0
  h00  8 variant_mem_reg
  h01 16 variant_mem_reg
  h01 32 variant_mem_reg
  h02  8 variant_reg_mem
  h03 16 variant_reg_mem
  h03 32 variant_reg_mem
  h02  8 variant_reg_reg
  h03 16 variant_reg_reg
  h03 32 variant_reg_reg

multi-op ADC
  h14  8 variant _al_imm  ' first.value imm!
  h15 16 variant _ax_imm  ' first.value imm!
  h15 32 variant _eax_imm ' first.value imm!
  h80  8 variant_mem_imm /2
  h81 16 variant_mem_imm /2
  h81 32 variant_mem_imm /2
  h80  8 variant_reg_imm /2
  h81 16 variant_reg_imm /2
  h81 32 variant_reg_imm /2
  // signed-extended?
  h83 16 variant_mem_imm8 /2
  h83 16 variant_reg_imm8 /2
  h83 32 variant_mem_imm8 /2
  h83 32 variant_reg_imm8 /2
  h10  8 variant_mem_reg
  h11 16 variant_mem_reg
  h11 32 variant_mem_reg
  h12  8 variant_reg_mem
  h13 16 variant_reg_mem
  h13 32 variant_reg_mem
  h12  8 variant_reg_reg
  h13 16 variant_reg_reg
  h13 32 variant_reg_reg

multi-op SUB
  h2C  8 variant _al_imm  ' first.value imm!
  h2D 16 variant _ax_imm  ' first.value imm!
  h2D 32 variant _eax_imm ' first.value imm!
  h80  8 variant_mem_imm /5
  h81 16 variant_mem_imm /5
  h81 32 variant_mem_imm /5
  h80  8 variant_reg_imm /5
  h81 16 variant_reg_imm /5
  h81 32 variant_reg_imm /5
  // signed-extended?
  h83 16 variant_mem_imm8 /5
  h83 16 variant_reg_imm8 /5
  h83 32 variant_mem_imm8 /5
  h83 32 variant_reg_imm8 /5
  h28  8 variant_mem_reg
  h29 16 variant_mem_reg
  h29 32 variant_mem_reg
  h2A  8 variant_reg_mem
  h2B 16 variant_reg_mem
  h2B 32 variant_reg_mem
  h2A  8 variant_reg_reg
  h2B 16 variant_reg_reg
  h2B 32 variant_reg_reg

multi-op SBB
  h1C  8 variant _al_imm  ' first.value imm!
  h1D 16 variant _ax_imm  ' first.value imm!
  h1D 32 variant _eax_imm ' first.value imm!
  h80  8 variant_mem_imm /3
  h81 16 variant_mem_imm /3
  h81 32 variant_mem_imm /3
  h80  8 variant_reg_imm /3
  h81 16 variant_reg_imm /3
  h81 32 variant_reg_imm /3
  // signed-extended?
  h83 16 variant_mem_imm8 /3
  h83 32 variant_mem_imm8 /3
  h83 16 variant_reg_imm8 /3
  h83 32 variant_reg_imm8 /3
  h18  8 variant_mem_reg
  h19 16 variant_mem_reg
  h19 32 variant_mem_reg
  h1A  8 variant_reg_mem
  h1B 16 variant_reg_mem
  h1B 32 variant_reg_mem
  h1A  8 variant_reg_reg
  h1B 16 variant_reg_reg
  h1B 32 variant_reg_reg )

multi-op MUL
  hF6  8 variant_reg /4
  hF6  8 variant_mem /4
  hF7 16 variant_reg /4
  hF7 16 variant_mem /4
  hF7 32 variant_reg /4
  hF7 32 variant_mem /4

multi-op IMUL
  // 1 operand
  hF6  8 variant_reg /5
  last alias IMUL8_mem
  hF7 16 variant_reg /5
  last alias IMUL16_mem
  hF7 32 variant_reg /5
  last alias IMUL32_mem
  // 2 operands
  h0F hAF 16 variant_reg_reg 1 prefixes
  last alias IMUL16_reg_mem
  h0F hAF 32 variant_reg_reg 1 prefixes
  last alias IMUL32_reg_mem
  // 3 operands
  h6B 16 variant _reg_reg_imm8 ' third.value /r 
                               ' second mem!
                               ' first.value imm! 1 imm#!
  last alias IMUL16_reg_mem_imm8
  h6B 32 variant _reg_reg_imm8 ' third.value /r 
                               ' second mem!
                               ' first.value imm! 1 imm#!
  last alias IMUL32_reg_mem_imm8
  h69 16 variant _reg_reg_imm  ' third.value /r 
                               ' second mem!
                               ' first.value imm!
  last alias IMUL16_reg_mem_imm
  h69 32 variant _reg_reg_imm  ' third.value /r 
                               ' second mem!
                               ' first.value imm!
  last alias IMUL32_reg_mem_imm
// }}}
// {{{ Decimal Arithmetic Instructions
// TODO DAA DAS AAM AAD
h37 0 op AAA
h3F 0 op AAS
// }}}
// {{{ Logical Instructions
// TODO NOT
( multi-op AND
  h24  8 variant _al_imm  ' first.value imm!
  h25 16 variant _ax_imm  ' first.value imm!
  h25 32 variant _eax_imm ' first.value imm!
  h80  8 variant_mem_imm /4
  h81 16 variant_mem_imm /4
  h81 32 variant_mem_imm /4
  h80  8 variant_reg_imm /4
  h81 16 variant_reg_imm /4
  h81 32 variant_reg_imm /4
  // signed-extended?
  h83 16 variant_mem_imm8 /4
  h83 16 variant_reg_imm8 /4
  h83 32 variant_mem_imm8 /4
  h83 32 variant_reg_imm8 /4
  h20  8 variant_mem_reg
  h21 16 variant_mem_reg
  h21 32 variant_mem_reg
  h22  8 variant_reg_mem
  h23 16 variant_reg_mem
  h23 32 variant_reg_mem
  h22  8 variant_reg_reg
  h23 16 variant_reg_reg
  h23 32 variant_reg_reg

multi-op XOR
  h34  8 variant _al_imm  ' first.value imm!
  h35 16 variant _ax_imm  ' first.value imm!
  h35 32 variant _eax_imm ' first.value imm!
  h80  8 variant_mem_imm /6
  h81 16 variant_mem_imm /6
  h81 32 variant_mem_imm /6
  h80  8 variant_reg_imm /6
  h81 16 variant_reg_imm /6
  h81 32 variant_reg_imm /6
  // signed-extended?
  h83 16 variant_mem_imm8 /6
  h83 32 variant_mem_imm8 /6
  h83 16 variant_reg_imm8 /6
  h83 32 variant_reg_imm8 /6
  h30  8 variant_mem_reg
  h31 16 variant_mem_reg
  h31 32 variant_mem_reg
  h32  8 variant_reg_mem
  h33 16 variant_reg_mem
  h33 32 variant_reg_mem
  h32  8 variant_reg_reg
  h33 16 variant_reg_reg
  h33 32 variant_reg_reg )
// }}}
// {{{ Shift and Rotate Instructions
// TODO SAR SHR SAL/SHL SHRD SHLD ROR ROL RCR RCL
// }}}
// {{{ Bit and Byte Instructions
// TODO BT BTS BTR BTC BSF BSR SETE/SETZ SETNE/SETNZ SETA/SETNBE
// TODO SETAE/SETNB/SETNC SETB/SETNAE/SETC SETBE/SETNA SETG/SETNLE
// TODO SETGE/SETNL SETL/SETNGE SETLE/SETNG SETS SETNS SETO
// TODO SETNO SETPE/SETP SETPO/SETNP TEST
// }}}
// {{{ Control Transfer Instructions
// TODO JMP JE/JZ JNE/JNZ JA/JNBE JAE/JNB JB/JNAE JBE/JNA JG/JNLE JGE/JNL
// TODO JL/JNGE JLE/JNG JC JNC JO JNO JS JNS JPO/JNP JPE/JP JCXZ/JECXZ
// TODO LOOP LOOPZ/LOOPE LOOPNZ/LOOPNE CALL RET IRET INT INTO BOUND
// TODO ENTER LEAVE
// }}}
// {{{ String Instructions
// TODO MOVS/MOVSB MOVS/MOVSW MOVS/MOVSD CMPS/CMPSB CMPS/CMPSW CMPS/CMPSD
// TODO SCAS/SCASB SCAS/SCASW SCAS/SCASD LODS/LODSB LODS/LODSW LODS/LODSD
// TODO STOS/STOSB STOS/STOSW STOS/STOSD REP REPE/REPZ REPNE/REPNZ
// }}}
// {{{ I/O Instructions
// TODO IN OUT INS/INSB INS/INSW INS/INSD OUTS/OUTSB OUTS/OUTSW OUTS/OUTSD
// }}}
// {{{ Flag Control (EFLAG) Instructions
// TODO STC CLC CMC CLD STD LAHF SAHF PUSHF/PUSHFD POPF/POPFD STI CLI
// }}}
// {{{ Segment Register Instructions
// TODO LDS LES LFS LGS LSS
// }}}
// {{{ Miscellaneous Instructions
// TODO XLAT/XLATB MOVBE
multi-op LEA
  h8D 16 variant _reg_mem16 ' second.value /r ' first mem!
  last alias LEA16_reg_mem32
  h8D 32 variant _reg_mem16 ' second.value /r ' first mem!
  last alias LEA32_reg_mem32

multi-op NOP
  h90 0 variant _
  h0F h1F 16 2variant _reg /0 ' first mem!
  last alias NOP16_mem
  h0F h1F 32 2variant _reg /0 ' first mem!
  last alias NOP32_mem

hF4 0 op HLT
h0F h0B 0 op UD2 1 prefixes
h0F hA2 0 op CPUID 1 prefixes
// }}}
