// 2011.07.31 # Doj
// Команды множества IA-32

// {{{ Data Transfer Instructions
// TODO CMOVE/CMOVZ CMOVNE/CMOVNZ CMOVA/CMOVNBE CMOVAE/CMOVNB
// TODO CMOVB/CMOVNAE CMOVBE/CMOVNA CMOVG/CMOVNLE CMOVGE/CMOVNL
// TODO CMOVL/CMOVNGE CMOVLE/CMOVNG CMOVC CMOVNC CMOVO CMOVNO
// TODO CMOVS CMOVNS CMOVP/CMOVPE CMOVNP/CMOVPO XCHG BSWAP
// TODO XADD CMPXCHG CMPXCHG8B PUSH POP PUSHA/PUSHAD POPA/POPAD
// TODO CWD/CDQ CBW/CWDE MOVSX MOVZX
multi-op MOV
  hA0  8 variant _al_moffset  ' first.disp imm!
  hA1 16 variant _ax_moffset  ' first.disp imm!
  hA1 32 variant _eax_moffset ' first.disp imm!
  hA2  8 variant _moffset_al  ' second.disp imm!
  hA3 16 variant _moffset_ax  ' second.disp imm!
  hA3 32 variant _moffset_eax ' second.disp imm!
  hB0  8 variant _reg_imm ' second.value +r ' first.value imm!
  hB8 16 variant _reg_imm ' second.value +r ' first.value imm!
  hB8 32 variant _reg_imm ' second.value +r ' first.value imm!
  h8C 16 variant _reg_seg // underconstruction
  h8E 16 variant _seg_reg // underconstruction
  h8C 16 variant _mem_seg // underconstruction
  h8E 16 variant _seg_mem // underconstruction
  hC6  8 variant _mem_imm ' first.value imm! ' second mem! '0 /r
  hC7 16 variant _mem_imm ' first.value imm! ' second mem! '0 /r
  hC7 32 variant _mem_imm ' first.value imm! ' second mem! '0 /r
  h88  8 variant _mem_reg ' second mem! ' first.value /r
  h89 16 variant _mem_reg ' second mem! ' first.value /r
  h89 32 variant _mem_reg ' second mem! ' first.value /r
  h8A  8 variant _reg_reg ' second.value /r ' first mem!
  h8B 16 variant _reg_reg ' second.value /r ' first mem!
  h8B 32 variant _reg_reg ' second.value /r ' first mem!
  h8A  8 variant _reg_mem ' first mem! ' second.value /r
  h8B 16 variant _reg_mem ' first mem! ' second.value /r
  h8B 32 variant _reg_mem ' first mem! ' second.value /r
// }}}
// {{{ Binary Arithmetic Instructions
// TODO IDIV DIV INC DEC NEG CMP
multi-op ADD
  h04  8 variant _al_imm  ' first.value imm!
  h05 16 variant _ax_imm  ' first.value imm!
  h05 32 variant _eax_imm ' first.value imm!
  h80  8 variant _mem_imm /0 ' first.value imm! ' second mem!
  h81 16 variant _mem_imm /0 ' first.value imm! ' second mem!
  h81 32 variant _mem_imm /0 ' first.value imm! ' second mem!
  h80  8 variant _reg_imm /0 ' first.value imm! ' second mem!
  h81 16 variant _reg_imm /0 ' first.value imm! ' second mem!
  h81 32 variant _reg_imm /0 ' first.value imm! ' second mem!
  // signed-extended?
  // h83 16 variant _mem_imm /0 ' first.value imm!
  // h83 32 variant _mem_imm /0 ' first.value imm!
  h00  8 variant _mem_reg ' first.value /r ' second mem!
  h01 16 variant _mem_reg ' first.value /r ' second mem!
  h01 32 variant _mem_reg ' first.value /r ' second mem!
  h02  8 variant _reg_mem ' second.value /r ' first mem!
  h03 16 variant _reg_mem ' second.value /r ' first mem!
  h03 32 variant _reg_mem ' second.value /r ' first mem!
  h02  8 variant _reg_reg ' second.value /r ' first mem!
  h03 16 variant _reg_reg ' second.value /r ' first mem!
  h03 32 variant _reg_reg ' second.value /r ' first mem!

multi-op ADC
  h14  8 variant _al_imm  ' first.value imm!
  h15 16 variant _ax_imm  ' first.value imm!
  h15 32 variant _eax_imm ' first.value imm!
  h80  8 variant _mem_imm /2 ' first.value imm! ' second mem!
  h81 16 variant _mem_imm /2 ' first.value imm! ' second mem!
  h81 32 variant _mem_imm /2 ' first.value imm! ' second mem!
  h80  8 variant _reg_imm /2 ' first.value imm! ' second mem!
  h81 16 variant _reg_imm /2 ' first.value imm! ' second mem!
  h81 32 variant _reg_imm /2 ' first.value imm! ' second mem!
  // signed-extended?
  // h83 16 variant _mem_imm /2 ' first.value imm!
  // h83 32 variant _mem_imm /2 ' first.value imm!
  h10  8 variant _mem_reg ' first.value /r ' second mem!
  h11 16 variant _mem_reg ' first.value /r ' second mem!
  h11 32 variant _mem_reg ' first.value /r ' second mem!
  h12  8 variant _reg_mem ' second.value /r ' first mem!
  h13 16 variant _reg_mem ' second.value /r ' first mem!
  h13 32 variant _reg_mem ' second.value /r ' first mem!
  h12  8 variant _reg_reg ' second.value /r ' first mem!
  h13 16 variant _reg_reg ' second.value /r ' first mem!
  h13 32 variant _reg_reg ' second.value /r ' first mem!

multi-op SUB
  h2C  8 variant _al_imm  ' first.value imm!
  h2D 16 variant _ax_imm  ' first.value imm!
  h2D 32 variant _eax_imm ' first.value imm!
  h80  8 variant _mem_imm /5 ' first.value imm! ' second mem!
  h81 16 variant _mem_imm /5 ' first.value imm! ' second mem!
  h81 32 variant _mem_imm /5 ' first.value imm! ' second mem!
  h80  8 variant _reg_imm /5 ' first.value imm! ' second mem!
  h81 16 variant _reg_imm /5 ' first.value imm! ' second mem!
  h81 32 variant _reg_imm /5 ' first.value imm! ' second mem!
  // signed-extended?
  // h83 16 variant _mem_imm /5 ' first.value imm!
  // h83 32 variant _mem_imm /5 ' first.value imm!
  h28  8 variant _mem_reg ' first.value /r ' second mem!
  h29 16 variant _mem_reg ' first.value /r ' second mem!
  h29 32 variant _mem_reg ' first.value /r ' second mem!
  h2A  8 variant _reg_mem ' second.value /r ' first mem!
  h2B 16 variant _reg_mem ' second.value /r ' first mem!
  h2B 32 variant _reg_mem ' second.value /r ' first mem!
  h2A  8 variant _reg_reg ' second.value /r ' first mem!
  h2B 16 variant _reg_reg ' second.value /r ' first mem!
  h2B 32 variant _reg_reg ' second.value /r ' first mem!

multi-op SBB
  h1C  8 variant _al_imm  ' first.value imm!
  h1D 16 variant _ax_imm  ' first.value imm!
  h1D 32 variant _eax_imm ' first.value imm!
  h80  8 variant _mem_imm /3 ' first.value imm! ' second mem!
  h81 16 variant _mem_imm /3 ' first.value imm! ' second mem!
  h81 32 variant _mem_imm /3 ' first.value imm! ' second mem!
  h80  8 variant _reg_imm /3 ' first.value imm! ' second mem!
  h81 16 variant _reg_imm /3 ' first.value imm! ' second mem!
  h81 32 variant _reg_imm /3 ' first.value imm! ' second mem!
  // signed-extended?
  h83 16 variant _mem_imm /3 ' first.value imm! 1 imm#!
  h83 32 variant _mem_imm /3 ' first.value imm! 1 imm#!
  h83 16 variant _reg_imm /3 ' first.value imm! 1 imm#!
  h83 32 variant _reg_imm /3 ' first.value imm! 1 imm#!
  h18  8 variant _mem_reg ' first.value /r ' second mem!
  h19 16 variant _mem_reg ' first.value /r ' second mem!
  h19 32 variant _mem_reg ' first.value /r ' second mem!
  h1A  8 variant _reg_mem ' second.value /r ' first mem!
  h1B 16 variant _reg_mem ' second.value /r ' first mem!
  h1B 32 variant _reg_mem ' second.value /r ' first mem!
  h1A  8 variant _reg_reg ' second.value /r ' first mem!
  h1B 16 variant _reg_reg ' second.value /r ' first mem!
  h1B 32 variant _reg_reg ' second.value /r ' first mem!

multi-op MUL
  hF6  8 variant _reg /4 ' first mem!
  hF6  8 variant _mem /4 ' first mem!
  hF7 16 variant _reg /4 ' first mem!
  hF7 16 variant _mem /4 ' first mem!
  hF7 32 variant _reg /4 ' first mem!
  hF7 32 variant _mem /4 ' first mem!

multi-op IMUL
  // 1 operand
  hF6  8 variant _reg /5 ' first mem!
  last alias IMUL8_mem
  hF7 16 variant _reg /5 ' first mem!
  last alias IMUL16_mem
  hF7 32 variant _reg /5 ' first mem!
  last alias IMUL32_mem
  // 2 operands
  h0F hAF 16 2variant _reg_reg ' second.value /r ' first mem!
  last alias IMUL16_reg_mem
  h0F hAF 32 2variant _reg_reg ' second.value /r ' first mem!
  last alias IMUL32_reg_mem
  // 3 operands
  h6B 16 variant _reg_reg_imm8 ' third.value /r 
                               ' second mem!
                               ' first.value imm! 1 imm#!
  last alias IMUL16_reg_mem_imm8
  h6B 32 variant _reg_reg_imm8 ' third.value /r 
                               ' second mem!
                               ' first.value imm! 1 imm#!
  last alias IMUL32_reg_mem_imm8
  h69 16 variant _reg_reg_imm  ' third.value /r 
                               ' second mem!
                               ' first.value imm!
  last alias IMUL16_reg_mem_imm
  h69 32 variant _reg_reg_imm  ' third.value /r 
                               ' second mem!
                               ' first.value imm!
  last alias IMUL32_reg_mem_imm
// }}}
// {{{ Decimal Arithmetic Instructions
// TODO DAA DAS AAA AAS AAM AAD
// }}}
// {{{ Logical Instructions
// TODO OR NOT
multi-op AND
  h24  8 variant _al_imm  ' first.value imm!
  h25 16 variant _ax_imm  ' first.value imm!
  h25 32 variant _eax_imm ' first.value imm!
  h80  8 variant _mem_imm /4 ' first.value imm! ' second mem!
  h81 16 variant _mem_imm /4 ' first.value imm! ' second mem!
  h81 32 variant _mem_imm /4 ' first.value imm! ' second mem!
  h80  8 variant _reg_imm /4 ' first.value imm! ' second mem!
  h81 16 variant _reg_imm /4 ' first.value imm! ' second mem!
  h81 32 variant _reg_imm /4 ' first.value imm! ' second mem!
  // signed-extended?
  // h83 16 variant _mem_imm /4 ' first.value imm!
  // h83 32 variant _mem_imm /4 ' first.value imm!
  h20  8 variant _mem_reg ' first.value /r ' second mem!
  h21 16 variant _mem_reg ' first.value /r ' second mem!
  h21 32 variant _mem_reg ' first.value /r ' second mem!
  h22  8 variant _reg_mem ' second.value /r ' first mem!
  h23 16 variant _reg_mem ' second.value /r ' first mem!
  h23 32 variant _reg_mem ' second.value /r ' first mem!
  h22  8 variant _reg_reg ' second.value /r ' first mem!
  h23 16 variant _reg_reg ' second.value /r ' first mem!
  h23 32 variant _reg_reg ' second.value /r ' first mem!

multi-op XOR
  h34  8 variant _al_imm  ' first.value imm!
  h35 16 variant _ax_imm  ' first.value imm!
  h35 32 variant _eax_imm ' first.value imm!
  h80  8 variant _mem_imm /6 ' first.value imm! ' second mem!
  h81 16 variant _mem_imm /6 ' first.value imm! ' second mem!
  h81 32 variant _mem_imm /6 ' first.value imm! ' second mem!
  h80  8 variant _reg_imm /6 ' first.value imm! ' second mem!
  h81 16 variant _reg_imm /6 ' first.value imm! ' second mem!
  h81 32 variant _reg_imm /6 ' first.value imm! ' second mem!
  // signed-extended?
  h83 16 variant _mem_imm8 /6 ' first.value imm! 1 imm#!
  h83 32 variant _mem_imm8 /6 ' first.value imm! 1 imm#!
  h83 16 variant _reg_imm8 /6 ' first.value imm! 1 imm#!
  h83 32 variant _reg_imm8 /6 ' first.value imm! 1 imm#!
  h30  8 variant _mem_reg ' first.value /r ' second mem!
  h31 16 variant _mem_reg ' first.value /r ' second mem!
  h31 32 variant _mem_reg ' first.value /r ' second mem!
  h32  8 variant _reg_mem ' second.value /r ' first mem!
  h33 16 variant _reg_mem ' second.value /r ' first mem!
  h33 32 variant _reg_mem ' second.value /r ' first mem!
  h32  8 variant _reg_reg ' second.value /r ' first mem!
  h33 16 variant _reg_reg ' second.value /r ' first mem!
  h33 32 variant _reg_reg ' second.value /r ' first mem!
// }}}
// {{{ Shift and Rotate Instructions
// TODO SAR SHR SAL/SHL SHRD SHLD ROR ROL RCR RCL
// }}}
// {{{ Bit and Byte Instructions
// TODO BT BTS BTR BTC BSF BSR SETE/SETZ SETNE/SETNZ SETA/SETNBE
// TODO SETAE/SETNB/SETNC SETB/SETNAE/SETC SETBE/SETNA SETG/SETNLE
// TODO SETGE/SETNL SETL/SETNGE SETLE/SETNG SETS SETNS SETO
// TODO SETNO SETPE/SETP SETPO/SETNP TEST
// }}}
// {{{ Control Transfer Instructions
// }}}
// {{{ String Instructions
// }}}
// {{{ I/O Instructions
// }}}
// {{{ Enter and Leave Instructions
// }}}
// {{{ Flag Control (EFLAG) Instructions
// }}}
// {{{ Segment Register Instructions
// }}}
// {{{ Miscellaneous Instructions
multi-op LEA
  h8D 16 variant _reg_mem16 ' second.value /r ' first mem!
  last alias LEA16_reg_mem32
  h8D 32 variant _reg_mem16 ' second.value /r ' first mem!
  last alias LEA32_reg_mem32
// }}}
multi-op HL
  hF4 0 variant T
