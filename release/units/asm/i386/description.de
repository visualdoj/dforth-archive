// 2011.07.31 # Doj
// Команды для удобного описания ассемблерных команд (таблиц)

include" units\statements\switch.de"

I386 extend-namespace 
// {{{ COMMAND_DESCRIPTION
  namespace COMMAND_DESCRIPTION
    // Простейшии команды, у которых лишь одна форма
    : 0op ( опкод) create , does> @ byte<< clear-operands ;
    : w-op ( опкод) create , does> @ byte<< first .value @ word<< clear-operands ;
    : r-op ( опкод) create , does> @ first .value @ + byte<< clear-operands ;

    // Создаём команды, которые кладут xt, возвращающие определённые константы
    :noname  0 ; value '0
    :noname  1 ; value '1
    :noname  2 ; value '2
    :noname  3 ; value '3
    :noname  4 ; value '4
    :noname  5 ; value '5
    :noname  6 ; value '6
    :noname  7 ; value '7

    // Команды доступа к определённым полям операндов 
    : first.value first .value @ ;
    : second.value second .value @ ;
    : third.value third .value @ ;
    : first.disp first .disp @ ;
    : second.disp second .disp @ ;
    : third.disp third .disp @ ;

    // Вычисляет по операнду mod поле в ModR/M
    // : opmod ( opcode -- mod) .disp @ dup if 0 else 256 < if 1 else 2 then then ;
    : opmod ( opcode -- mod) .disp @ dup if 256 < if 1 else 2 then then ;
    // Вычисляет по операнду mod поле в ModR/M при условии, что base регистром
    // является EBP
    : ebp-mod ( opcode -- mod) .disp @ 256 < if 1 else 2 then ;
    // Записываем disp по самому disp и вычесленному ранее mod
    : disp-mod<< ( dm) ?dup if 1 = if byte<< else dword<< then else drop then ;
    // Записываем disp операнда
    : disp<< ( operand) dup .disp @ swap opmod disp-mod<< ;
    : ebp-disp<< ( operand) dup .disp @ swap ebp-mod disp-mod<< ;
    // Вычисляем по операнду SS составляющую в SIB
    : op.SS ( operand -- SS) 
                   .factor @ switch 
                      1 of 0 \of 
                      2 of 1 \of 
                      4 of 2 \of
                      8 of 4 \of
                    \switch ;

    // Все команды ниже имеют одинаковы стековый рисунок: 
    // ( register operand -- )
    // где register - число от 0 до 7, которое будет записано в reg часть байта
    //                ModR/M
    //     operand - указатель на структуру операнда, который является
    //                косвенной адресацией
    : [f*i+d]<< 0 lrot ESP ModR/M<< 
                dup dup op.SS swap dup .index @ swap .base @ SIB<<
                .disp @ dword<< ;
    : [ebp+f*i+d]<< tuck ebp-mod ESP ModR/M<< 
                    dup op.SS over .index @ EBP SIB<< ebp-disp<< ;
    : [b+f*i+d]<< tuck opmod swap ESP ModR/M<<
                  dup dup op.SS swap dup .index @ swap .base @ SIB<< disp<< ;
    : [d]<< swap 0 swap EBP ModR/M<< .disp @ dword<< ;
    : [ebp+d]<< tuck ebp-mod swap EBP ModR/M<< ebp-disp<< ;
    : [esp+d]<< tuck opmod swap ESP ModR/M<< 0 ESP ESP SIB<< disp<< ;
    : [b+d]<< tuck opmod swap ( por) 3 pick .base @ ModR/M<< disp<< ;

    // Описание параметров то же, что и у предыдущих слов
    : r/m<< ( rp)
      dup .type @ OT_REG = if
        .value @ 3 rrot ModR/M<<
      else
        dup factor? if
          dup .index @ ESP = if
            " cannot use ESP as index in mov" error
          else
            dup .base @ switch
              -1 of [f*i+d]<< \of
              EBP of [ebp+f*i+d]<< \of
              [b+f*i+d]<<
            \switch
          then
        else
          dup .base @ switch
             -1 of [d]<< \of
            EBP of [ebp+d]<< \of
            ESP of [esp+d]<< \of
            [b+d]<<
          \switch
        then
      then
    ;
    
    // Структура, содержащая описание формы команды
    0
      t_int -- v.opcode // опкод варианта
      t_int -- v.bits // 8, 16 или 32
      t_ptr -- v.+r // команда, возвращающая что нужно прибавлять к опкоду
      t_ptr -- v.mem // команда, возвращающая операнд, который записываем в mem составляющую
                     // 0 означает, что mem составляющей нет
      t_ptr -- v./r // команда, возвращающая что записывать в reg поле ModR/M
      t_int -- v.imm# // команда, возвращающая число байт в imm составляющей
                      // 0 означает, что imm нет
      t_ptr -- v.imm

      t_int -- v.link# // сколько байт выделить под ссылку
      t_ptr -- v.resolver // xt-resolver
      t_ptr -- v.link // link (см. labels.de)

      t_int -- v.prefixes# // число префиксов перед опкодом
      t_int -- v.prefix1
      t_int -- v.prefix2
      t_int -- v.prefix3
      t_int -- v.prefix4
    struct s_variant
   
    // Записывает переданную форму
    : variant<< ( variant)
      dup v.bits @ switch
        16 of 16 switch<< \of
        32 of 32 switch<< \of
      \switch
      dup v.prefix1 over v.prefixes# @ begin ?dup while
        swap dup @ byte<< cell+ swap
      1- repeat drop
      dup v.opcode @ over v.+r @ execute + byte<<
      dup v.mem @ execute ?dup if over v./r @ execute swap r/m<< then
      dup v.imm# @ switch
        1 of dup v.imm @ execute byte<< \of
        2 of dup v.imm @ execute word<< \of
        4 of dup v.imm @ execute dword<< \of
      \switch
      dup v.link# @ if
        pos@ over v.resolver @ 3 pick v.link @ execute LABELS label! ^
        dup v.link# @ switch
          1 of 0 byte<< \of
          2 of 0 word<< \of
          4 of 0 dword<< \of
          \switch then
      drop ;
    
    variable *multi-op-name *multi-op-name off

    : init-variant ( opcode bits)
        swap , , '0 , '0 , '0 , 0 , '0 , 0 , '0 , '0 , 0 , 0 , 0 , 0 , 0 , ;

    : op ( opcode bits) create init-variant does> variant<< ;
    : 2op ( prefix opcode bits) 
        op
        1 last xt.param@ v.prefixes# !
        last xt.param@ v.prefix1 ! ;
    : multi-oped *multi-op-name b! ;
    : multi-op source-next-name multi-oped ;
    : single-instructions str0 *multi-op-name b! ;

    : multi-form-name ( bits B: postfix )
        ?dup if int->str bswap str+ then 
        *multi-op-name b@ bswap str+ ;
    : varianted ( opcode bits S: postfix) 
        dup multi-form-name created init-variant
      does> variant<< ;
    : variant ( opcode bits) source-next-name varianted ;
    : 2variant ( prefix opcode bits) variant ( prefix)
      1 last xt.param@ v.prefixes# ! 
      last xt.param@ v.prefix1 ! ;
    : 3variant ( prefix1 prefix2 opcode bits) variant ( prefix1 prefix2)
      2 last xt.param@ v.prefixes# ! 
      last xt.param@ v.prefix2 !
      last xt.param@ v.prefix1 ! ;
    : prefixes ( prefix1 ... prefixn n)
        dup last xt.param@ v.prefixes# ! 0;
        swap last xt.param@ v.prefix1 ! 1- 0;
        swap last xt.param@ v.prefix2 ! 1- 0;
        swap last xt.param@ v.prefix3 ! 1- 0;
        swap last xt.param@ v.prefix4 ! 1- 0;
        " not supported " 4 + int->str str+ 
        "  prefixes per an instruction" str+ error ;
    : +r last xt.param@ v.+r ! ;
    : mem! last xt.param@ v.mem ! ;
    : /r last xt.param@ v./r ! ;
    : imm#! last xt.param@ v.imm# ! ;
    : imm! last xt.param@ v.imm ! last xt.param@ v.bits @ 8 div imm#! ;
    : res! last xt.param@ v.resolver ! ;
    : link#! 
        ['] first.value last xt.param@ v.link !
        dup last xt.param@ v.link# !
        swap switch
          1 of 'byte-rel-resolver res! \of
          2 of 'word-rel-resolver res! \of
          4 of 'dword-rel-resolver res! \of
        \switch ;
    : short-link 1 link#! ;
    : near-link 2 link#! ;
    : far-link 4 link#! ;

    : /0 '0 /r ;
    : /1 '1 /r ;
    : /2 '2 /r ;
    : /3 '3 /r ;
    : /4 '4 /r ;
    : /5 '5 /r ;
    : /6 '6 /r ;
    : /7 '7 /r ;

    : variant_imm " _imm" varianted ['] first.value imm! ;
    : variant_mem " _mem" varianted ['] first mem! ;
    : variant_r/m " _reg" varianted ['] first mem! ;
    last alias variant_reg
    : variant_mem_imm " _mem_imm" varianted ['] first.value imm! ['] second mem! ;
    : variant_r/m_imm " _reg_imm" varianted ['] first.value imm! ['] second mem! ;
    : variant_reg_imm " _reg_imm" varianted ['] first.value imm! ['] second.value +r ;

    : variant_reg_mem " _reg_mem" varianted ['] second.value /r ['] first mem! ;
    : variant_reg_r/m " _reg_reg" varianted ['] second.value /r ['] first mem! ;
    last alias variant_reg_reg

    : variant_mem_reg " _mem_reg" varianted ['] second mem! ['] first.value /r ;
    : variant_r/m_reg " _r/m_reg" varianted ['] second mem! ['] first.value /r ;

    : variant_mem_imm8 " _mem_imm8" varianted ['] first.value imm! ['] second mem! '0 /r 1 imm#! ;
    : variant_r/m_imm8 " _reg_imm8" varianted ['] first.value imm! ['] second mem! '0 /r 1 imm#! ;
    last alias variant_reg_imm8
    : variant_al_imm " _al_imm" varianted ['] first.value imm! ;
    : variant_ax_imm " _ax_imm" varianted ['] first.value imm! ;
    : variant_eax_imm " _eax_imm" varianted ['] first.value imm! ;
    : variant_rel " _rel" varianted short-link ;
    : variant_short " _rel" varianted short-link ;
    : variant_near " _rel" varianted near-link ;
    : variant_far " _rel" varianted far-link ;

  \namespace
// }}}
\namespace
