// 2012.02.24 # Doj
// Конструкция для создания глобальных массивов

// Создание выглядит так:
//     <count> <size> array "name" 
// где
//     count -- число элементов в массиве
//     size -- размер одного элемента в массиве
//     name -- имя переменной для массива
// После этого доступны следующие команды
//     name      ( -- ptr) кладёт указатель на начало массива в памяти
//     name#     ( -- int) кладёт размер массива, т.е. count
//     name-size ( -- int) кладёт размер элемента, т.е. size
//     name[]    ( int -- ptr) кладёт указатель на элемент, имеющий заданный номер
//   
// |count |size  |el[0] |el[1] | ... ... ... |el[count] |

0
    t_int -- .size
    t_int -- .count
struct s-array-description

: array-make-op ( B: s) created 
  does> ( -- ptr) [ 2 cells ] literal + ;

: array-make-op# ( p "name") created 
  does> ( -- count) cell+ @ ;

: array-make-op-size ( p "name") created 
  does> ( -- size) @ ;

: array-make-op[] ( p "name") created 
  does> ( int -- ptr) tuck @ * + [ 2 cells ] literal + ;

: array ( count size "name" --)
    source-next-name
    bdup +" '" created ( count size)
    bdup array-make-op
    bdup +" #" array-make-op#
    bdup +" -size" array-make-op-size
    bdup +" []" array-make-op[]
    bdrop
    ( count size) 2dup , , * allot ;

: buffer ( size --) 1 array ;
: cell-array ( count --) [ 1 cells ] literal array ;

variable wtf
: make-array-op, ( add-xt B: s -- resolve) created , here 0 ,
  does> ( ...) dup wtf ! @ execute 
               wtf @ cell+ @ .count 1+! ; 

: array-start ( add-xt size "name" --)
    source-next-name
    bdup +" ," swap ( size add-xt) make-array-op, ( size resolve)
    bdup +" '" created here ( size resolve ptr) swap ! ( size)
    bdup array-make-op
    bdup +" #" array-make-op#
    bdup +" -size" array-make-op-size
    bdup +" []" array-make-op[]
    bdrop
    , 0 , ( add-xt ptr) ;

: cell-array-start ( "name" --) ['] , [ 1 cells ] literal array-start ;
